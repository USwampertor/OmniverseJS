# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'mainWindowUI.ui'
##
## Created by: Qt User Interface Compiler version 5.15.2
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide2.QtCore import *
from PySide2.QtGui import *
from PySide2.QtWidgets import *

from .attributeValueEditor import AttributeValueEditor
from .primLegend import PrimLegend
from .propertyLegend import PropertyLegend
from .primTreeWidget import PrimTreeWidget
from .frameSlider import FrameSlider


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        if not MainWindow.objectName():
            MainWindow.setObjectName(u"MainWindow")
        MainWindow.resize(1145, 1002)
        MainWindow.setStyleSheet(u"")
        self.actionOpen = QAction(MainWindow)
        self.actionOpen.setObjectName(u"actionOpen")
        self.actionOpen.setShortcutContext(Qt.ApplicationShortcut)
        self.actionQuit = QAction(MainWindow)
        self.actionQuit.setObjectName(u"actionQuit")
        self.actionQuit.setShortcutContext(Qt.ApplicationShortcut)
        self.actionPause = QAction(MainWindow)
        self.actionPause.setObjectName(u"actionPause")
        self.actionPause.setCheckable(True)
        self.actionPause.setShortcutContext(Qt.ApplicationShortcut)
        self.actionStop = QAction(MainWindow)
        self.actionStop.setObjectName(u"actionStop")
        self.actionStop.setCheckable(True)
        self.actionStop.setShortcutContext(Qt.ApplicationShortcut)
        self.actionReset_View = QAction(MainWindow)
        self.actionReset_View.setObjectName(u"actionReset_View")
        self.actionReset_View.setShortcutContext(Qt.ApplicationShortcut)
        self.actionToggle_Framed_View = QAction(MainWindow)
        self.actionToggle_Framed_View.setObjectName(u"actionToggle_Framed_View")
        self.actionToggle_Framed_View.setShortcutContext(Qt.ApplicationShortcut)
        self.actionWatch_Window = QAction(MainWindow)
        self.actionWatch_Window.setObjectName(u"actionWatch_Window")
        self.actionWatch_Window.setCheckable(True)
        self.actionWatch_Window.setEnabled(False)
        self.actionWatch_Window.setShortcutContext(Qt.ApplicationShortcut)
        self.actionFrame_Forward = QAction(MainWindow)
        self.actionFrame_Forward.setObjectName(u"actionFrame_Forward")
        self.actionFrame_Backwards = QAction(MainWindow)
        self.actionFrame_Backwards.setObjectName(u"actionFrame_Backwards")
        self.actionAdjust_FOV = QAction(MainWindow)
        self.actionAdjust_FOV.setObjectName(u"actionAdjust_FOV")
        self.actionAdjust_FOV.setShortcutContext(Qt.ApplicationShortcut)
        self.actionReopen_Stage = QAction(MainWindow)
        self.actionReopen_Stage.setObjectName(u"actionReopen_Stage")
        self.actionDump_RIB = QAction(MainWindow)
        self.actionDump_RIB.setObjectName(u"actionDump_RIB")
        self.actionLevel_1 = QAction(MainWindow)
        self.actionLevel_1.setObjectName(u"actionLevel_1")
        self.actionLevel_1.setShortcutContext(Qt.ApplicationShortcut)
        self.actionLevel_2 = QAction(MainWindow)
        self.actionLevel_2.setObjectName(u"actionLevel_2")
        self.actionLevel_2.setShortcutContext(Qt.ApplicationShortcut)
        self.actionLevel_3 = QAction(MainWindow)
        self.actionLevel_3.setObjectName(u"actionLevel_3")
        self.actionLevel_3.setShortcutContext(Qt.ApplicationShortcut)
        self.actionLevel_4 = QAction(MainWindow)
        self.actionLevel_4.setObjectName(u"actionLevel_4")
        self.actionLevel_4.setShortcutContext(Qt.ApplicationShortcut)
        self.actionLevel_5 = QAction(MainWindow)
        self.actionLevel_5.setObjectName(u"actionLevel_5")
        self.actionLevel_5.setShortcutContext(Qt.ApplicationShortcut)
        self.actionExpand_All = QAction(MainWindow)
        self.actionExpand_All.setObjectName(u"actionExpand_All")
        self.actionExpand_All.setShortcutContext(Qt.ApplicationShortcut)
        self.actionCollapse_All = QAction(MainWindow)
        self.actionCollapse_All.setObjectName(u"actionCollapse_All")
        self.actionCollapse_All.setShortcutContext(Qt.ApplicationShortcut)
        self.actionAmbient_Only = QAction(MainWindow)
        self.actionAmbient_Only.setObjectName(u"actionAmbient_Only")
        self.actionAmbient_Only.setCheckable(True)
        self.actionAmbient_Only.setChecked(True)
        self.actionDomeLight = QAction(MainWindow)
        self.actionDomeLight.setObjectName(u"actionDomeLight")
        self.actionDomeLight.setCheckable(True)
        self.actionDomeLight.setChecked(True)
        self.actionLevel_6 = QAction(MainWindow)
        self.actionLevel_6.setObjectName(u"actionLevel_6")
        self.actionLevel_6.setShortcutContext(Qt.ApplicationShortcut)
        self.actionLevel_7 = QAction(MainWindow)
        self.actionLevel_7.setObjectName(u"actionLevel_7")
        self.actionLevel_7.setShortcutContext(Qt.ApplicationShortcut)
        self.actionLevel_8 = QAction(MainWindow)
        self.actionLevel_8.setObjectName(u"actionLevel_8")
        self.actionLevel_8.setShortcutContext(Qt.ApplicationShortcut)
        self.actionWireframe = QAction(MainWindow)
        self.actionWireframe.setObjectName(u"actionWireframe")
        self.actionWireframe.setCheckable(True)
        self.actionWireframe.setChecked(False)
        self.actionWireframe.setShortcutContext(Qt.ApplicationShortcut)
        self.actionWireframeOnSurface = QAction(MainWindow)
        self.actionWireframeOnSurface.setObjectName(u"actionWireframeOnSurface")
        self.actionWireframeOnSurface.setCheckable(True)
        self.actionWireframeOnSurface.setChecked(False)
        self.actionWireframeOnSurface.setShortcutContext(Qt.ApplicationShortcut)
        self.actionSmooth_Shaded = QAction(MainWindow)
        self.actionSmooth_Shaded.setObjectName(u"actionSmooth_Shaded")
        self.actionSmooth_Shaded.setCheckable(True)
        self.actionSmooth_Shaded.setChecked(True)
        self.actionSmooth_Shaded.setShortcutContext(Qt.ApplicationShortcut)
        self.actionFlat_Shaded = QAction(MainWindow)
        self.actionFlat_Shaded.setObjectName(u"actionFlat_Shaded")
        self.actionFlat_Shaded.setCheckable(True)
        self.actionFlat_Shaded.setShortcutContext(Qt.ApplicationShortcut)
        self.actionPoints = QAction(MainWindow)
        self.actionPoints.setObjectName(u"actionPoints")
        self.actionPoints.setCheckable(True)
        self.actionPoints.setShortcutContext(Qt.ApplicationShortcut)
        self.actionGeom_Only = QAction(MainWindow)
        self.actionGeom_Only.setObjectName(u"actionGeom_Only")
        self.actionGeom_Only.setCheckable(True)
        self.actionGeom_Only.setShortcutContext(Qt.ApplicationShortcut)
        self.actionRedrawOnScrub = QAction(MainWindow)
        self.actionRedrawOnScrub.setObjectName(u"actionRedrawOnScrub")
        self.actionRedrawOnScrub.setCheckable(True)
        self.actionRedrawOnScrub.setChecked(True)
        self.actionIncrementComplexity1 = QAction(MainWindow)
        self.actionIncrementComplexity1.setObjectName(u"actionIncrementComplexity1")
        self.actionDecrementComplexity = QAction(MainWindow)
        self.actionDecrementComplexity.setObjectName(u"actionDecrementComplexity")
        self.actionPRMan = QAction(MainWindow)
        self.actionPRMan.setObjectName(u"actionPRMan")
        self.actionPRMan.setAutoRepeat(False)
        self.actionBlack = QAction(MainWindow)
        self.actionBlack.setObjectName(u"actionBlack")
        self.actionBlack.setCheckable(True)
        self.actionBlack.setChecked(False)
        self.actionWhite = QAction(MainWindow)
        self.actionWhite.setObjectName(u"actionWhite")
        self.actionWhite.setCheckable(True)
        self.actionGrey_Light = QAction(MainWindow)
        self.actionGrey_Light.setObjectName(u"actionGrey_Light")
        self.actionGrey_Light.setCheckable(True)
        self.actionGrey_Dark = QAction(MainWindow)
        self.actionGrey_Dark.setObjectName(u"actionGrey_Dark")
        self.actionGrey_Dark.setCheckable(True)
        self.actionGrey_Dark.setChecked(True)
        self.actionGeom_Smooth = QAction(MainWindow)
        self.actionGeom_Smooth.setObjectName(u"actionGeom_Smooth")
        self.actionGeom_Smooth.setCheckable(True)
        self.actionGeom_Flat = QAction(MainWindow)
        self.actionGeom_Flat.setObjectName(u"actionGeom_Flat")
        self.actionGeom_Flat.setCheckable(True)
        self.actionHidden_Surface_Wireframe = QAction(MainWindow)
        self.actionHidden_Surface_Wireframe.setObjectName(u"actionHidden_Surface_Wireframe")
        self.actionHidden_Surface_Wireframe.setCheckable(True)
        self.actionHidden_Surface_Wireframe.setChecked(False)
        self.actionNoColorCorrection = QAction(MainWindow)
        self.actionNoColorCorrection.setObjectName(u"actionNoColorCorrection")
        self.actionNoColorCorrection.setCheckable(True)
        self.actionNoColorCorrection.setChecked(False)
        self.actionSRGBColorCorrection = QAction(MainWindow)
        self.actionSRGBColorCorrection.setObjectName(u"actionSRGBColorCorrection")
        self.actionSRGBColorCorrection.setCheckable(True)
        self.actionSRGBColorCorrection.setChecked(True)
        self.actionOpenColorIO = QAction(MainWindow)
        self.actionOpenColorIO.setObjectName(u"actionOpenColorIO")
        self.actionOpenColorIO.setCheckable(True)
        self.actionOpenColorIO.setChecked(False)
        self.actionFreeCam = QAction(MainWindow)
        self.actionFreeCam.setObjectName(u"actionFreeCam")
        self.actionFreeCam.setCheckable(True)
        self.actionFreeCam.setChecked(True)
        self.actionSave_Overrides_As = QAction(MainWindow)
        self.actionSave_Overrides_As.setObjectName(u"actionSave_Overrides_As")
        self.actionSave_Overrides_As.setEnabled(True)
        self.actionSave_Flattened_As = QAction(MainWindow)
        self.actionSave_Flattened_As.setObjectName(u"actionSave_Flattened_As")
        self.actionSave_Flattened_As.setEnabled(True)
        self.showInterpreter = QAction(MainWindow)
        self.showInterpreter.setObjectName(u"showInterpreter")
        self.showInterpreter.setCheckable(False)
        self.showDebugFlags = QAction(MainWindow)
        self.showDebugFlags.setObjectName(u"showDebugFlags")
        self.showDebugFlags.setCheckable(False)
        self.actionHUD_VBOInfo = QAction(MainWindow)
        self.actionHUD_VBOInfo.setObjectName(u"actionHUD_VBOInfo")
        self.actionHUD_VBOInfo.setCheckable(True)
        self.actionHUD_VBOInfo.setChecked(True)
        self.actionHUD_Info = QAction(MainWindow)
        self.actionHUD_Info.setObjectName(u"actionHUD_Info")
        self.actionHUD_Info.setCheckable(True)
        self.actionHUD_Info.setChecked(True)
        self.actionHUD_VBO = QAction(MainWindow)
        self.actionHUD_VBO.setObjectName(u"actionHUD_VBO")
        self.actionHUD_VBO.setCheckable(True)
        self.actionHUD_VBO.setChecked(True)
        self.actionHUD_Complexity = QAction(MainWindow)
        self.actionHUD_Complexity.setObjectName(u"actionHUD_Complexity")
        self.actionHUD_Complexity.setCheckable(True)
        self.actionHUD_Complexity.setChecked(True)
        self.actionHUD_Performance = QAction(MainWindow)
        self.actionHUD_Performance.setObjectName(u"actionHUD_Performance")
        self.actionHUD_Performance.setCheckable(True)
        self.actionHUD_Performance.setChecked(True)
        self.actionHUD_GPUstats = QAction(MainWindow)
        self.actionHUD_GPUstats.setObjectName(u"actionHUD_GPUstats")
        self.actionHUD_GPUstats.setCheckable(True)
        self.actionHUD_GPUstats.setChecked(False)
        self.actionHUD = QAction(MainWindow)
        self.actionHUD.setObjectName(u"actionHUD")
        self.actionHUD.setCheckable(True)
        self.actionHUD.setChecked(True)
        self.actionCameraMask_Outline = QAction(MainWindow)
        self.actionCameraMask_Outline.setObjectName(u"actionCameraMask_Outline")
        self.actionCameraMask_Outline.setCheckable(True)
        self.actionCameraMask_Outline.setChecked(False)
        self.actionDisplay_Guide = QAction(MainWindow)
        self.actionDisplay_Guide.setObjectName(u"actionDisplay_Guide")
        self.actionDisplay_Guide.setCheckable(True)
        self.actionDisplay_Render = QAction(MainWindow)
        self.actionDisplay_Render.setObjectName(u"actionDisplay_Render")
        self.actionDisplay_Render.setCheckable(True)
        self.actionDisplay_PrimId = QAction(MainWindow)
        self.actionDisplay_PrimId.setObjectName(u"actionDisplay_PrimId")
        self.actionDisplay_PrimId.setCheckable(True)
        self.actionEnable_Scene_Materials = QAction(MainWindow)
        self.actionEnable_Scene_Materials.setObjectName(u"actionEnable_Scene_Materials")
        self.actionEnable_Scene_Materials.setCheckable(True)
        self.actionEnable_Scene_Materials.setChecked(True)
        self.actionShow_Inactive_Prims = QAction(MainWindow)
        self.actionShow_Inactive_Prims.setObjectName(u"actionShow_Inactive_Prims")
        self.actionShow_Inactive_Prims.setCheckable(True)
        self.showAABBox = QAction(MainWindow)
        self.showAABBox.setObjectName(u"showAABBox")
        self.showAABBox.setCheckable(True)
        self.showAABBox.setChecked(True)
        self.showOBBox = QAction(MainWindow)
        self.showOBBox.setObjectName(u"showOBBox")
        self.showOBBox.setCheckable(True)
        self.showBBoxPlayback = QAction(MainWindow)
        self.showBBoxPlayback.setObjectName(u"showBBoxPlayback")
        self.showBBoxPlayback.setCheckable(True)
        self.showBBoxes = QAction(MainWindow)
        self.showBBoxes.setObjectName(u"showBBoxes")
        self.showBBoxes.setCheckable(True)
        self.showBBoxes.setChecked(True)
        self.showBBoxes.setEnabled(True)
        self.actionVersion_Info = QAction(MainWindow)
        self.actionVersion_Info.setObjectName(u"actionVersion_Info")
        self.actionVersion_Info.setCheckable(True)
        self.actionVersion_Info.setShortcutContext(Qt.ApplicationShortcut)
        self.actionAdjust_Clipping = QAction(MainWindow)
        self.actionAdjust_Clipping.setObjectName(u"actionAdjust_Clipping")
        self.actionAdjust_Clipping.setCheckable(True)
        self.actionIncrementComplexity2 = QAction(MainWindow)
        self.actionIncrementComplexity2.setObjectName(u"actionIncrementComplexity2")
        self.actionCull_Backfaces = QAction(MainWindow)
        self.actionCull_Backfaces.setObjectName(u"actionCull_Backfaces")
        self.actionCull_Backfaces.setCheckable(True)
        self.actionCull_Backfaces.setChecked(True)
        self.actionSave_Overrides_To_Scene = QAction(MainWindow)
        self.actionSave_Overrides_To_Scene.setObjectName(u"actionSave_Overrides_To_Scene")
        self.actionSave_Overrides_To_Scene.setEnabled(False)
        self.actionSave_Overrides_To_Scene.setVisible(False)
        self.actionMake_Visible = QAction(MainWindow)
        self.actionMake_Visible.setObjectName(u"actionMake_Visible")
        self.actionMake_Invisible = QAction(MainWindow)
        self.actionMake_Invisible.setObjectName(u"actionMake_Invisible")
        self.actionRemove_Session_Visibility = QAction(MainWindow)
        self.actionRemove_Session_Visibility.setObjectName(u"actionRemove_Session_Visibility")
        self.actionActivate = QAction(MainWindow)
        self.actionActivate.setObjectName(u"actionActivate")
        self.actionDeactivate = QAction(MainWindow)
        self.actionDeactivate.setObjectName(u"actionDeactivate")
        self.actionSelect_Model_Root = QAction(MainWindow)
        self.actionSelect_Model_Root.setObjectName(u"actionSelect_Model_Root")
        self.actionSelect_Model_Root.setEnabled(True)
        self.actionRefresh_Procedurals = QAction(MainWindow)
        self.actionRefresh_Procedurals.setObjectName(u"actionRefresh_Procedurals")
        self.actionReload_All_Layers = QAction(MainWindow)
        self.actionReload_All_Layers.setObjectName(u"actionReload_All_Layers")
        self.actionHD_Flags = QAction(MainWindow)
        self.actionHD_Flags.setObjectName(u"actionHD_Flags")
        self.actionHD_Flags_2 = QAction(MainWindow)
        self.actionHD_Flags_2.setObjectName(u"actionHD_Flags_2")
        self.actionHD_Flags_3 = QAction(MainWindow)
        self.actionHD_Flags_3.setObjectName(u"actionHD_Flags_3")
        self.actionMenu = QAction(MainWindow)
        self.actionMenu.setObjectName(u"actionMenu")
        self.actionSdf = QAction(MainWindow)
        self.actionSdf.setObjectName(u"actionSdf")
        self.actionGeom_Id = QAction(MainWindow)
        self.actionGeom_Id.setObjectName(u"actionGeom_Id")
        self.actionShow_All_Master_Prims = QAction(MainWindow)
        self.actionShow_All_Master_Prims.setObjectName(u"actionShow_All_Master_Prims")
        self.actionShow_All_Master_Prims.setCheckable(True)
        self.actionShow_Undefined_Prims = QAction(MainWindow)
        self.actionShow_Undefined_Prims.setObjectName(u"actionShow_Undefined_Prims")
        self.actionShow_Undefined_Prims.setCheckable(True)
        self.actionShow_Abstract_Prims = QAction(MainWindow)
        self.actionShow_Abstract_Prims.setObjectName(u"actionShow_Abstract_Prims")
        self.actionShow_Abstract_Prims.setCheckable(True)
        self.actionPick_Prims = QAction(MainWindow)
        self.actionPick_Prims.setObjectName(u"actionPick_Prims")
        self.actionPick_Prims.setCheckable(True)
        self.actionPick_Models = QAction(MainWindow)
        self.actionPick_Models.setObjectName(u"actionPick_Models")
        self.actionPick_Models.setCheckable(True)
        self.actionPick_Instances = QAction(MainWindow)
        self.actionPick_Instances.setObjectName(u"actionPick_Instances")
        self.actionPick_Instances.setCheckable(True)
        self.actionPick_Prototypes = QAction(MainWindow)
        self.actionPick_Prototypes.setObjectName(u"actionPick_Prototypes")
        self.actionPick_Prototypes.setCheckable(True)
        self.actionToggle_Viewer_Mode = QAction(MainWindow)
        self.actionToggle_Viewer_Mode.setObjectName(u"actionToggle_Viewer_Mode")
        self.useExtentsHint = QAction(MainWindow)
        self.useExtentsHint.setObjectName(u"useExtentsHint")
        self.useExtentsHint.setCheckable(True)
        self.useExtentsHint.setChecked(True)
        self.actionNever = QAction(MainWindow)
        self.actionNever.setObjectName(u"actionNever")
        self.actionNever.setCheckable(True)
        self.actionOnly_when_paused = QAction(MainWindow)
        self.actionOnly_when_paused.setObjectName(u"actionOnly_when_paused")
        self.actionOnly_when_paused.setCheckable(True)
        self.actionOnly_when_paused.setChecked(True)
        self.actionAlways = QAction(MainWindow)
        self.actionAlways.setObjectName(u"actionAlways")
        self.actionAlways.setCheckable(True)
        self.actionSelYellow = QAction(MainWindow)
        self.actionSelYellow.setObjectName(u"actionSelYellow")
        self.actionSelYellow.setCheckable(True)
        self.actionSelYellow.setChecked(True)
        self.actionSelWhite = QAction(MainWindow)
        self.actionSelWhite.setObjectName(u"actionSelWhite")
        self.actionSelWhite.setCheckable(True)
        self.actionSelCyan = QAction(MainWindow)
        self.actionSelCyan.setObjectName(u"actionSelCyan")
        self.actionSelCyan.setCheckable(True)
        self.actionVis_Only = QAction(MainWindow)
        self.actionVis_Only.setObjectName(u"actionVis_Only")
        self.actionReset_All_Session_Visibility = QAction(MainWindow)
        self.actionReset_All_Session_Visibility.setObjectName(u"actionReset_All_Session_Visibility")
        self.actionLoad = QAction(MainWindow)
        self.actionLoad.setObjectName(u"actionLoad")
        self.actionUnload = QAction(MainWindow)
        self.actionUnload.setObjectName(u"actionUnload")
        self.actionSelect_Bound_Preview_Material = QAction(MainWindow)
        self.actionSelect_Bound_Preview_Material.setObjectName(u"actionSelect_Bound_Preview_Material")
        self.actionRollover_Prim_Info = QAction(MainWindow)
        self.actionRollover_Prim_Info.setObjectName(u"actionRollover_Prim_Info")
        self.actionRollover_Prim_Info.setCheckable(True)
        self.actionAuto_Compute_Clipping_Planes = QAction(MainWindow)
        self.actionAuto_Compute_Clipping_Planes.setObjectName(u"actionAuto_Compute_Clipping_Planes")
        self.actionAuto_Compute_Clipping_Planes.setCheckable(True)
        self.actionFind_Prims = QAction(MainWindow)
        self.actionFind_Prims.setObjectName(u"actionFind_Prims")
        self.actionSelect_Stage_Root = QAction(MainWindow)
        self.actionSelect_Stage_Root.setObjectName(u"actionSelect_Stage_Root")
        self.actionDisplay_Camera_Oracles = QAction(MainWindow)
        self.actionDisplay_Camera_Oracles.setObjectName(u"actionDisplay_Camera_Oracles")
        self.actionDisplay_Camera_Oracles.setCheckable(True)
        self.actionDisplay_Proxy = QAction(MainWindow)
        self.actionDisplay_Proxy.setObjectName(u"actionDisplay_Proxy")
        self.actionDisplay_Proxy.setCheckable(True)
        self.actionAdjust_Default_Material = QAction(MainWindow)
        self.actionAdjust_Default_Material.setObjectName(u"actionAdjust_Default_Material")
        self.actionAdjust_Default_Material.setCheckable(True)
        self.actionCameraReticles_Inside = QAction(MainWindow)
        self.actionCameraReticles_Inside.setObjectName(u"actionCameraReticles_Inside")
        self.actionCameraReticles_Inside.setCheckable(True)
        self.actionCameraReticles_Inside.setChecked(False)
        self.actionCameraReticles_Outside = QAction(MainWindow)
        self.actionCameraReticles_Outside.setObjectName(u"actionCameraReticles_Outside")
        self.actionCameraReticles_Outside.setCheckable(True)
        self.actionCameraReticles_Outside.setChecked(False)
        self.actionCameraReticles_Color = QAction(MainWindow)
        self.actionCameraReticles_Color.setObjectName(u"actionCameraReticles_Color")
        self.actionLow = QAction(MainWindow)
        self.actionLow.setObjectName(u"actionLow")
        self.actionLow.setCheckable(True)
        self.actionMedium = QAction(MainWindow)
        self.actionMedium.setObjectName(u"actionMedium")
        self.actionMedium.setCheckable(True)
        self.actionHigh = QAction(MainWindow)
        self.actionHigh.setObjectName(u"actionHigh")
        self.actionHigh.setCheckable(True)
        self.actionVery_High = QAction(MainWindow)
        self.actionVery_High.setObjectName(u"actionVery_High")
        self.actionVery_High.setCheckable(True)
        self.actionSelect_Bound_Full_Material = QAction(MainWindow)
        self.actionSelect_Bound_Full_Material.setObjectName(u"actionSelect_Bound_Full_Material")
        self.actionSelect_Preview_Binding_Relationship = QAction(MainWindow)
        self.actionSelect_Preview_Binding_Relationship.setObjectName(u"actionSelect_Preview_Binding_Relationship")
        self.actionSelect_Full_Binding_Relationship = QAction(MainWindow)
        self.actionSelect_Full_Binding_Relationship.setObjectName(u"actionSelect_Full_Binding_Relationship")
        self.actionPreferences = QAction(MainWindow)
        self.actionPreferences.setObjectName(u"actionPreferences")
        self.actionPreferences.setCheckable(True)
        self.actionGroupCameraMask = QActionGroup(MainWindow)
        self.actionGroupCameraMask.setObjectName(u"actionGroupCameraMask")
        self.actionCameraMask_Full = QAction(self.actionGroupCameraMask)
        self.actionCameraMask_Full.setObjectName(u"actionCameraMask_Full")
        self.actionCameraMask_Full.setCheckable(True)
        self.actionCameraMask_Full.setChecked(False)
        self.actionCameraMask_Partial = QAction(self.actionGroupCameraMask)
        self.actionCameraMask_Partial.setObjectName(u"actionCameraMask_Partial")
        self.actionCameraMask_Partial.setCheckable(True)
        self.actionCameraMask_Partial.setChecked(False)
        self.actionCameraMask_None = QAction(self.actionGroupCameraMask)
        self.actionCameraMask_None.setObjectName(u"actionCameraMask_None")
        self.actionCameraMask_None.setCheckable(True)
        self.actionCameraMask_None.setChecked(True)
        self.actionCameraMask_Color = QAction(self.actionGroupCameraMask)
        self.actionCameraMask_Color.setObjectName(u"actionCameraMask_Color")
        self.actionCameraMask_Color.setCheckable(False)
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName(u"centralwidget")
        self.verticalLayout_4 = QVBoxLayout(self.centralwidget)
        self.verticalLayout_4.setObjectName(u"verticalLayout_4")
        self.currentPathWidget = QLineEdit(self.centralwidget)
        self.currentPathWidget.setObjectName(u"currentPathWidget")
        self.currentPathWidget.setFocusPolicy(Qt.StrongFocus)

        self.verticalLayout_4.addWidget(self.currentPathWidget)

        self.topBottomSplitter = QSplitter(self.centralwidget)
        self.topBottomSplitter.setObjectName(u"topBottomSplitter")
        sizePolicy = QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.topBottomSplitter.sizePolicy().hasHeightForWidth())
        self.topBottomSplitter.setSizePolicy(sizePolicy)
        self.topBottomSplitter.setFrameShape(QFrame.NoFrame)
        self.topBottomSplitter.setFrameShadow(QFrame.Plain)
        self.topBottomSplitter.setLineWidth(0)
        self.topBottomSplitter.setMidLineWidth(0)
        self.topBottomSplitter.setOrientation(Qt.Vertical)
        self.primStageSplitter = QSplitter(self.topBottomSplitter)
        self.primStageSplitter.setObjectName(u"primStageSplitter")
        self.primStageSplitter.setOrientation(Qt.Horizontal)
        self.primFrame = QFrame(self.primStageSplitter)
        self.primFrame.setObjectName(u"primFrame")
        self.primFrame.setFrameShape(QFrame.NoFrame)
        self.primFrame.setFrameShadow(QFrame.Plain)
        self.primFrame.setLineWidth(0)
        self.verticalLayout_2 = QVBoxLayout(self.primFrame)
        self.verticalLayout_2.setObjectName(u"verticalLayout_2")
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 6)
        self.primViewMenuBar = QMenuBar(self.primFrame)
        self.primViewMenuBar.setObjectName(u"primViewMenuBar")
        self.primViewMenuBar.setLayoutDirection(Qt.LeftToRight)
        self.primViewMenuBar.setNativeMenuBar(False)
        self.menuNavigation = QMenu(self.primViewMenuBar)
        self.menuNavigation.setObjectName(u"menuNavigation")
        self.menuShow = QMenu(self.primViewMenuBar)
        self.menuShow.setObjectName(u"menuShow")
        self.menuPrim_View_Depth = QMenu(self.menuShow)
        self.menuPrim_View_Depth.setObjectName(u"menuPrim_View_Depth")

        self.verticalLayout_2.addWidget(self.primViewMenuBar)

        self.primView = PrimTreeWidget(self.primFrame)
        __qtreewidgetitem = QTreeWidgetItem()
        __qtreewidgetitem.setTextAlignment(2, Qt.AlignLeading|Qt.AlignVCenter);
        self.primView.setHeaderItem(__qtreewidgetitem)
        self.primView.setObjectName(u"primView")
        font = QFont()
        font.setFamily(u"Gotham Rounded")
        font.setPointSize(9)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.primView.setFont(font)
        self.primView.setContextMenuPolicy(Qt.CustomContextMenu)
        self.primView.setFrameShape(QFrame.NoFrame)
        self.primView.setFrameShadow(QFrame.Plain)
        self.primView.setLineWidth(0)
        self.primView.setMidLineWidth(0)
        self.primView.setAlternatingRowColors(True)
        self.primView.setSelectionMode(QAbstractItemView.ExtendedSelection)
        self.primView.setUniformRowHeights(True)
        self.primView.setAllColumnsShowFocus(True)
        self.primView.header().setCascadingSectionResizes(True)
        self.primView.header().setMinimumSectionSize(20)
        self.primView.header().setDefaultSectionSize(150)
        self.primView.header().setStretchLastSection(False)

        self.verticalLayout_2.addWidget(self.primView)

        self.primLegendContainer = PrimLegend(self.primFrame)
        self.primLegendContainer.setObjectName(u"primLegendContainer")

        self.verticalLayout_2.addWidget(self.primLegendContainer)

        self.primFindContainer = QHBoxLayout()
        self.primFindContainer.setObjectName(u"primFindContainer")
        self.primFindContainer.setContentsMargins(-1, 0, -1, -1)
        self.primLegendQButton = QPushButton(self.primFrame)
        self.primLegendQButton.setObjectName(u"primLegendQButton")
        sizePolicy1 = QSizePolicy(QSizePolicy.Minimum, QSizePolicy.Preferred)
        sizePolicy1.setHorizontalStretch(0)
        sizePolicy1.setVerticalStretch(0)
        sizePolicy1.setHeightForWidth(self.primLegendQButton.sizePolicy().hasHeightForWidth())
        self.primLegendQButton.setSizePolicy(sizePolicy1)
        self.primLegendQButton.setMaximumSize(QSize(3200, 3200))
        font1 = QFont()
        font1.setFamily(u"Gotham Rounded")
        font1.setPointSize(9)
        font1.setBold(True)
        font1.setWeight(75)
        self.primLegendQButton.setFont(font1)
        self.primLegendQButton.setFocusPolicy(Qt.NoFocus)
        self.primLegendQButton.setIconSize(QSize(12, 12))

        self.primFindContainer.addWidget(self.primLegendQButton)

        self.primViewLineEdit = QLineEdit(self.primFrame)
        self.primViewLineEdit.setObjectName(u"primViewLineEdit")
        sizePolicy2 = QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)
        sizePolicy2.setHorizontalStretch(0)
        sizePolicy2.setVerticalStretch(0)
        sizePolicy2.setHeightForWidth(self.primViewLineEdit.sizePolicy().hasHeightForWidth())
        self.primViewLineEdit.setSizePolicy(sizePolicy2)
        self.primViewLineEdit.setMaximumSize(QSize(16777215, 3200))
        self.primViewLineEdit.setFont(font)

        self.primFindContainer.addWidget(self.primViewLineEdit)

        self.primViewFindNext = QPushButton(self.primFrame)
        self.primViewFindNext.setObjectName(u"primViewFindNext")
        sizePolicy1.setHeightForWidth(self.primViewFindNext.sizePolicy().hasHeightForWidth())
        self.primViewFindNext.setSizePolicy(sizePolicy1)
        self.primViewFindNext.setMaximumSize(QSize(16777215, 3200))
        self.primViewFindNext.setFont(font)
        self.primViewFindNext.setFocusPolicy(Qt.NoFocus)

        self.primFindContainer.addWidget(self.primViewFindNext)


        self.verticalLayout_2.addLayout(self.primFindContainer)

        self.primStageSplitter.addWidget(self.primFrame)
        self.glFrame = QFrame(self.primStageSplitter)
        self.glFrame.setObjectName(u"glFrame")
        self.glFrame.setMinimumSize(QSize(200, 0))
        self.glFrame.setLayoutDirection(Qt.LeftToRight)
        self.glFrame.setFrameShape(QFrame.NoFrame)
        self.glFrame.setFrameShadow(QFrame.Plain)
        self.glFrame.setLineWidth(0)
        self.primStageSplitter.addWidget(self.glFrame)
        self.topBottomSplitter.addWidget(self.primStageSplitter)
        self.attribBrowserInspectorSplitter = QSplitter(self.topBottomSplitter)
        self.attribBrowserInspectorSplitter.setObjectName(u"attribBrowserInspectorSplitter")
        self.attribBrowserInspectorSplitter.setOrientation(Qt.Horizontal)
        self.attributeBrowserFrame = QFrame(self.attribBrowserInspectorSplitter)
        self.attributeBrowserFrame.setObjectName(u"attributeBrowserFrame")
        self.attributeBrowserFrame.setFrameShape(QFrame.NoFrame)
        self.attributeBrowserFrame.setFrameShadow(QFrame.Plain)
        self.attributeBrowserFrame.setLineWidth(0)
        self.verticalLayout_7 = QVBoxLayout(self.attributeBrowserFrame)
        self.verticalLayout_7.setObjectName(u"verticalLayout_7")
        self.verticalLayout_7.setContentsMargins(2, 0, 0, 5)
        self.propertyView = QTreeWidget(self.attributeBrowserFrame)
        self.propertyView.setObjectName(u"propertyView")
        self.propertyView.setStyleSheet(u"")
        self.propertyView.setFrameShape(QFrame.NoFrame)
        self.propertyView.setFrameShadow(QFrame.Plain)
        self.propertyView.setAlternatingRowColors(True)
        self.propertyView.setTextElideMode(Qt.ElideMiddle)
        self.propertyView.setColumnCount(3)

        self.verticalLayout_7.addWidget(self.propertyView)

        self.propertyLegendContainer = PropertyLegend(self.attributeBrowserFrame)
        self.propertyLegendContainer.setObjectName(u"propertyLegendContainer")

        self.verticalLayout_7.addWidget(self.propertyLegendContainer)

        self.propertyFindContainer = QHBoxLayout()
        self.propertyFindContainer.setObjectName(u"propertyFindContainer")
        self.propertyFindContainer.setContentsMargins(5, -1, 5, -1)
        self.propertyLegendQButton = QPushButton(self.attributeBrowserFrame)
        self.propertyLegendQButton.setObjectName(u"propertyLegendQButton")
        sizePolicy3 = QSizePolicy(QSizePolicy.Preferred, QSizePolicy.Preferred)
        sizePolicy3.setHorizontalStretch(0)
        sizePolicy3.setVerticalStretch(0)
        sizePolicy3.setHeightForWidth(self.propertyLegendQButton.sizePolicy().hasHeightForWidth())
        self.propertyLegendQButton.setSizePolicy(sizePolicy3)
        self.propertyLegendQButton.setMaximumSize(QSize(3200, 3200))
        self.propertyLegendQButton.setFont(font)
        self.propertyLegendQButton.setFocusPolicy(Qt.NoFocus)
        self.propertyLegendQButton.setIconSize(QSize(12, 12))

        self.propertyFindContainer.addWidget(self.propertyLegendQButton)

        self.attrViewLineEdit = QLineEdit(self.attributeBrowserFrame)
        self.attrViewLineEdit.setObjectName(u"attrViewLineEdit")
        sizePolicy2.setHeightForWidth(self.attrViewLineEdit.sizePolicy().hasHeightForWidth())
        self.attrViewLineEdit.setSizePolicy(sizePolicy2)
        self.attrViewLineEdit.setMaximumSize(QSize(16777215, 3200))
        self.attrViewLineEdit.setFont(font)

        self.propertyFindContainer.addWidget(self.attrViewLineEdit)

        self.attrViewFindNext = QPushButton(self.attributeBrowserFrame)
        self.attrViewFindNext.setObjectName(u"attrViewFindNext")
        sizePolicy1.setHeightForWidth(self.attrViewFindNext.sizePolicy().hasHeightForWidth())
        self.attrViewFindNext.setSizePolicy(sizePolicy1)
        self.attrViewFindNext.setMaximumSize(QSize(16777215, 3200))
        self.attrViewFindNext.setFont(font)
        self.attrViewFindNext.setFocusPolicy(Qt.NoFocus)
        self.attrViewFindNext.setIconSize(QSize(24, 24))

        self.propertyFindContainer.addWidget(self.attrViewFindNext)

        self.propertyFindContainer.setStretch(0, 1)
        self.propertyFindContainer.setStretch(1, 20)
        self.propertyFindContainer.setStretch(2, 2)

        self.verticalLayout_7.addLayout(self.propertyFindContainer)

        self.attribBrowserInspectorSplitter.addWidget(self.attributeBrowserFrame)
        self.propertyInspectorFrame = QFrame(self.attribBrowserInspectorSplitter)
        self.propertyInspectorFrame.setObjectName(u"propertyInspectorFrame")
        self.propertyInspectorFrame.setFrameShape(QFrame.NoFrame)
        self.propertyInspectorFrame.setFrameShadow(QFrame.Plain)
        self.propertyInspectorFrame.setLineWidth(0)
        self.verticalLayout_8 = QVBoxLayout(self.propertyInspectorFrame)
        self.verticalLayout_8.setSpacing(0)
        self.verticalLayout_8.setObjectName(u"verticalLayout_8")
        self.verticalLayout_8.setContentsMargins(0, 1, 2, 2)
        self.propertyInspectorContainer = QFrame(self.propertyInspectorFrame)
        self.propertyInspectorContainer.setObjectName(u"propertyInspectorContainer")
        self.propertyInspectorContainer.setFrameShape(QFrame.NoFrame)
        self.propertyInspectorContainer.setFrameShadow(QFrame.Plain)
        self.verticalLayout_3 = QVBoxLayout(self.propertyInspectorContainer)
        self.verticalLayout_3.setObjectName(u"verticalLayout_3")
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.propertyInspector = QTabWidget(self.propertyInspectorContainer)
        self.propertyInspector.setObjectName(u"propertyInspector")
        self.value = QWidget()
        self.value.setObjectName(u"value")
        self.verticalLayout = QVBoxLayout(self.value)
        self.verticalLayout.setObjectName(u"verticalLayout")
        self.verticalLayout.setContentsMargins(6, 6, 6, 6)
        self.attributeValueEditor = AttributeValueEditor(self.value)
        self.attributeValueEditor.setObjectName(u"attributeValueEditor")

        self.verticalLayout.addWidget(self.attributeValueEditor)

        self.propertyInspector.addTab(self.value, "")
        self.metadata = QWidget()
        self.metadata.setObjectName(u"metadata")
        self.horizontalLayout = QHBoxLayout(self.metadata)
        self.horizontalLayout.setObjectName(u"horizontalLayout")
        self.attributeBrowserFrame_1 = QFrame(self.metadata)
        self.attributeBrowserFrame_1.setObjectName(u"attributeBrowserFrame_1")
        self.attributeBrowserFrame_1.setFrameShape(QFrame.NoFrame)
        self.attributeBrowserFrame_1.setFrameShadow(QFrame.Plain)
        self.attributeBrowserFrame_1.setLineWidth(0)
        self.verticalLayout_71 = QVBoxLayout(self.attributeBrowserFrame_1)
        self.verticalLayout_71.setObjectName(u"verticalLayout_71")
        self.verticalLayout_71.setContentsMargins(2, 0, 0, 5)
        self.metadataView = QTableWidget(self.attributeBrowserFrame_1)
        if (self.metadataView.columnCount() < 2):
            self.metadataView.setColumnCount(2)
        __qtablewidgetitem = QTableWidgetItem()
        self.metadataView.setHorizontalHeaderItem(0, __qtablewidgetitem)
        __qtablewidgetitem1 = QTableWidgetItem()
        self.metadataView.setHorizontalHeaderItem(1, __qtablewidgetitem1)
        self.metadataView.setObjectName(u"metadataView")
        self.metadataView.setStyleSheet(u"")
        self.metadataView.setFrameShape(QFrame.NoFrame)
        self.metadataView.setFrameShadow(QFrame.Plain)
        self.metadataView.setLineWidth(0)
        self.metadataView.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.metadataView.setAlternatingRowColors(True)
        self.metadataView.setSelectionMode(QAbstractItemView.SingleSelection)
        self.metadataView.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.metadataView.setShowGrid(False)
        self.metadataView.setGridStyle(Qt.SolidLine)
        self.metadataView.setColumnCount(2)
        self.metadataView.horizontalHeader().setCascadingSectionResizes(True)
        self.metadataView.horizontalHeader().setMinimumSectionSize(30)
        self.metadataView.horizontalHeader().setDefaultSectionSize(220)
        self.metadataView.horizontalHeader().setProperty("showSortIndicator", False)
        self.metadataView.horizontalHeader().setStretchLastSection(True)
        self.metadataView.verticalHeader().setVisible(False)
        self.metadataView.verticalHeader().setMinimumSectionSize(20)
        self.metadataView.verticalHeader().setDefaultSectionSize(30)
        self.metadataView.verticalHeader().setStretchLastSection(False)

        self.verticalLayout_71.addWidget(self.metadataView)


        self.horizontalLayout.addWidget(self.attributeBrowserFrame_1)

        self.propertyInspector.addTab(self.metadata, "")
        self.layerstack = QWidget()
        self.layerstack.setObjectName(u"layerstack")
        self.layerStackFrameLayout = QHBoxLayout(self.layerstack)
        self.layerStackFrameLayout.setObjectName(u"layerStackFrameLayout")
        self.layerStackFrame = QFrame(self.layerstack)
        self.layerStackFrame.setObjectName(u"layerStackFrame")
        self.layerStackFrame.setFrameShape(QFrame.NoFrame)
        self.layerStackFrame.setFrameShadow(QFrame.Plain)
        self.layerStackFrame.setLineWidth(0)
        self.layerStackViewLayout = QVBoxLayout(self.layerStackFrame)
        self.layerStackViewLayout.setObjectName(u"layerStackViewLayout")
        self.layerStackViewLayout.setContentsMargins(2, 0, 0, 5)
        self.layerStackView = QTableWidget(self.layerStackFrame)
        if (self.layerStackView.columnCount() < 3):
            self.layerStackView.setColumnCount(3)
        __qtablewidgetitem2 = QTableWidgetItem()
        self.layerStackView.setHorizontalHeaderItem(0, __qtablewidgetitem2)
        __qtablewidgetitem3 = QTableWidgetItem()
        self.layerStackView.setHorizontalHeaderItem(1, __qtablewidgetitem3)
        __qtablewidgetitem4 = QTableWidgetItem()
        self.layerStackView.setHorizontalHeaderItem(2, __qtablewidgetitem4)
        self.layerStackView.setObjectName(u"layerStackView")
        self.layerStackView.setStyleSheet(u"")
        self.layerStackView.setFrameShape(QFrame.NoFrame)
        self.layerStackView.setFrameShadow(QFrame.Plain)
        self.layerStackView.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.layerStackView.setAlternatingRowColors(True)
        self.layerStackView.setSelectionMode(QAbstractItemView.SingleSelection)
        self.layerStackView.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.layerStackView.setShowGrid(False)
        self.layerStackView.setGridStyle(Qt.SolidLine)
        self.layerStackView.setColumnCount(3)
        self.layerStackView.horizontalHeader().setCascadingSectionResizes(True)
        self.layerStackView.horizontalHeader().setMinimumSectionSize(30)
        self.layerStackView.horizontalHeader().setDefaultSectionSize(220)
        self.layerStackView.horizontalHeader().setProperty("showSortIndicator", False)
        self.layerStackView.horizontalHeader().setStretchLastSection(True)
        self.layerStackView.verticalHeader().setVisible(False)
        self.layerStackView.verticalHeader().setMinimumSectionSize(20)
        self.layerStackView.verticalHeader().setDefaultSectionSize(30)
        self.layerStackView.verticalHeader().setStretchLastSection(False)

        self.layerStackViewLayout.addWidget(self.layerStackView)


        self.layerStackFrameLayout.addWidget(self.layerStackFrame)

        self.propertyInspector.addTab(self.layerstack, "")
        self.tab = QWidget()
        self.tab.setObjectName(u"tab")
        self.horizontalLayout_4 = QHBoxLayout(self.tab)
        self.horizontalLayout_4.setObjectName(u"horizontalLayout_4")
        self.compositionTreeWidget = QTreeWidget(self.tab)
        self.compositionTreeWidget.setObjectName(u"compositionTreeWidget")
        self.compositionTreeWidget.setFrameShape(QFrame.NoFrame)
        self.compositionTreeWidget.setFrameShadow(QFrame.Plain)
        self.compositionTreeWidget.setAlternatingRowColors(True)
        self.compositionTreeWidget.setIndentation(15)
        self.compositionTreeWidget.header().setHighlightSections(False)
        self.compositionTreeWidget.header().setStretchLastSection(False)

        self.horizontalLayout_4.addWidget(self.compositionTreeWidget)

        self.propertyInspector.addTab(self.tab, "")

        self.verticalLayout_3.addWidget(self.propertyInspector)


        self.verticalLayout_8.addWidget(self.propertyInspectorContainer)

        self.attribBrowserInspectorSplitter.addWidget(self.propertyInspectorFrame)
        self.topBottomSplitter.addWidget(self.attribBrowserInspectorSplitter)

        self.verticalLayout_4.addWidget(self.topBottomSplitter)

        self.frameChangeContainer = QHBoxLayout()
        self.frameChangeContainer.setObjectName(u"frameChangeContainer")
        self.sliderContainer = QVBoxLayout()
        self.sliderContainer.setObjectName(u"sliderContainer")
        self.sliderTopContainer = QHBoxLayout()
        self.sliderTopContainer.setObjectName(u"sliderTopContainer")
        self.stageBegin = QLabel(self.centralwidget)
        self.stageBegin.setObjectName(u"stageBegin")
        sizePolicy4 = QSizePolicy(QSizePolicy.Minimum, QSizePolicy.Fixed)
        sizePolicy4.setHorizontalStretch(0)
        sizePolicy4.setVerticalStretch(0)
        sizePolicy4.setHeightForWidth(self.stageBegin.sizePolicy().hasHeightForWidth())
        self.stageBegin.setSizePolicy(sizePolicy4)
        self.stageBegin.setMaximumSize(QSize(9000, 9000))

        self.sliderTopContainer.addWidget(self.stageBegin)

        self.rangeBeginLayout = QVBoxLayout()
        self.rangeBeginLayout.setObjectName(u"rangeBeginLayout")
        self.rangeBeginLayout.setSizeConstraint(QLayout.SetFixedSize)
        self.verticalSpacer = QSpacerItem(20, 7, QSizePolicy.Minimum, QSizePolicy.Maximum)

        self.rangeBeginLayout.addItem(self.verticalSpacer)

        self.rangeBegin = QLineEdit(self.centralwidget)
        self.rangeBegin.setObjectName(u"rangeBegin")
        sizePolicy4.setHeightForWidth(self.rangeBegin.sizePolicy().hasHeightForWidth())
        self.rangeBegin.setSizePolicy(sizePolicy4)
        self.rangeBegin.setMaximumSize(QSize(90, 9000))
        self.rangeBegin.setAlignment(Qt.AlignRight|Qt.AlignTrailing|Qt.AlignVCenter)

        self.rangeBeginLayout.addWidget(self.rangeBegin)

        self.verticalSpacer_2 = QSpacerItem(20, 7, QSizePolicy.Minimum, QSizePolicy.Maximum)

        self.rangeBeginLayout.addItem(self.verticalSpacer_2)


        self.sliderTopContainer.addLayout(self.rangeBeginLayout)

        self.frameSlider = FrameSlider(self.centralwidget)
        self.frameSlider.setObjectName(u"frameSlider")
        self.frameSlider.setMinimumSize(QSize(90, 45))
        self.frameSlider.setPageStep(0)
        self.frameSlider.setOrientation(Qt.Horizontal)
        self.frameSlider.setTickPosition(QSlider.NoTicks)
        self.frameSlider.setTickInterval(0)

        self.sliderTopContainer.addWidget(self.frameSlider)

        self.rangeEndLayout = QVBoxLayout()
        self.rangeEndLayout.setObjectName(u"rangeEndLayout")
        self.rangeEndLayout.setSizeConstraint(QLayout.SetFixedSize)
        self.verticalSpacer_3 = QSpacerItem(10, 7, QSizePolicy.Minimum, QSizePolicy.Maximum)

        self.rangeEndLayout.addItem(self.verticalSpacer_3)

        self.rangeEnd = QLineEdit(self.centralwidget)
        self.rangeEnd.setObjectName(u"rangeEnd")
        sizePolicy5 = QSizePolicy(QSizePolicy.Preferred, QSizePolicy.Fixed)
        sizePolicy5.setHorizontalStretch(0)
        sizePolicy5.setVerticalStretch(0)
        sizePolicy5.setHeightForWidth(self.rangeEnd.sizePolicy().hasHeightForWidth())
        self.rangeEnd.setSizePolicy(sizePolicy5)
        self.rangeEnd.setMaximumSize(QSize(90, 9000))
        self.rangeEnd.setAlignment(Qt.AlignRight|Qt.AlignTrailing|Qt.AlignVCenter)

        self.rangeEndLayout.addWidget(self.rangeEnd)

        self.verticalSpacer_4 = QSpacerItem(20, 7, QSizePolicy.Minimum, QSizePolicy.Maximum)

        self.rangeEndLayout.addItem(self.verticalSpacer_4)


        self.sliderTopContainer.addLayout(self.rangeEndLayout)

        self.stageEnd = QLabel(self.centralwidget)
        self.stageEnd.setObjectName(u"stageEnd")
        sizePolicy4.setHeightForWidth(self.stageEnd.sizePolicy().hasHeightForWidth())
        self.stageEnd.setSizePolicy(sizePolicy4)
        self.stageEnd.setMaximumSize(QSize(9000, 9000))

        self.sliderTopContainer.addWidget(self.stageEnd)

        self.sliderTopContainer.setStretch(2, 200)

        self.sliderContainer.addLayout(self.sliderTopContainer)

        self.sliderBottomContainer = QHBoxLayout()
        self.sliderBottomContainer.setSpacing(6)
        self.sliderBottomContainer.setObjectName(u"sliderBottomContainer")
        self.horizontalSpacer_4 = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)

        self.sliderBottomContainer.addItem(self.horizontalSpacer_4)

        self.redrawOnScrub = QCheckBox(self.centralwidget)
        self.redrawOnScrub.setObjectName(u"redrawOnScrub")
        sizePolicy1.setHeightForWidth(self.redrawOnScrub.sizePolicy().hasHeightForWidth())
        self.redrawOnScrub.setSizePolicy(sizePolicy1)
        self.redrawOnScrub.setMaximumSize(QSize(3500, 16777215))
        self.redrawOnScrub.setFocusPolicy(Qt.NoFocus)
        self.redrawOnScrub.setChecked(True)

        self.sliderBottomContainer.addWidget(self.redrawOnScrub)

        self.horizontalSpacer_9 = QSpacerItem(20, 20, QSizePolicy.Fixed, QSizePolicy.Minimum)

        self.sliderBottomContainer.addItem(self.horizontalSpacer_9)

        self.stepSizeLabel = QLabel(self.centralwidget)
        self.stepSizeLabel.setObjectName(u"stepSizeLabel")

        self.sliderBottomContainer.addWidget(self.stepSizeLabel)

        self.stepSize = QLineEdit(self.centralwidget)
        self.stepSize.setObjectName(u"stepSize")
        self.stepSize.setEnabled(True)
        sizePolicy1.setHeightForWidth(self.stepSize.sizePolicy().hasHeightForWidth())
        self.stepSize.setSizePolicy(sizePolicy1)
        self.stepSize.setMaximumSize(QSize(60, 16777215))
        self.stepSize.setAlignment(Qt.AlignCenter)

        self.sliderBottomContainer.addWidget(self.stepSize)

        self.horizontalSpacer = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)

        self.sliderBottomContainer.addItem(self.horizontalSpacer)


        self.sliderContainer.addLayout(self.sliderBottomContainer)


        self.frameChangeContainer.addLayout(self.sliderContainer)

        self.line = QFrame(self.centralwidget)
        self.line.setObjectName(u"line")
        self.line.setFrameShape(QFrame.VLine)
        self.line.setFrameShadow(QFrame.Sunken)

        self.frameChangeContainer.addWidget(self.line)

        self.playContainer = QVBoxLayout()
        self.playContainer.setObjectName(u"playContainer")
        self.playButtonContainer = QHBoxLayout()
        self.playButtonContainer.setObjectName(u"playButtonContainer")
        self.horizontalSpacer_2 = QSpacerItem(15, 20, QSizePolicy.Maximum, QSizePolicy.Minimum)

        self.playButtonContainer.addItem(self.horizontalSpacer_2)

        self.playButton = QPushButton(self.centralwidget)
        self.playButton.setObjectName(u"playButton")
        sizePolicy6 = QSizePolicy(QSizePolicy.Maximum, QSizePolicy.Minimum)
        sizePolicy6.setHorizontalStretch(0)
        sizePolicy6.setVerticalStretch(0)
        sizePolicy6.setHeightForWidth(self.playButton.sizePolicy().hasHeightForWidth())
        self.playButton.setSizePolicy(sizePolicy6)
        self.playButton.setMaximumSize(QSize(1115, 16777215))
        self.playButton.setFocusPolicy(Qt.NoFocus)

        self.playButtonContainer.addWidget(self.playButton, 0, Qt.AlignHCenter)

        self.horizontalSpacer_3 = QSpacerItem(15, 20, QSizePolicy.Maximum, QSizePolicy.Minimum)

        self.playButtonContainer.addItem(self.horizontalSpacer_3)


        self.playContainer.addLayout(self.playButtonContainer)

        self.frameContainer = QHBoxLayout()
        self.frameContainer.setObjectName(u"frameContainer")
        self.horizontalSpacer_5 = QSpacerItem(5, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)

        self.frameContainer.addItem(self.horizontalSpacer_5)

        self.frameLabel = QLabel(self.centralwidget)
        self.frameLabel.setObjectName(u"frameLabel")
        sizePolicy3.setHeightForWidth(self.frameLabel.sizePolicy().hasHeightForWidth())
        self.frameLabel.setSizePolicy(sizePolicy3)
        self.frameLabel.setMaximumSize(QSize(9000, 16777215))

        self.frameContainer.addWidget(self.frameLabel)

        self.frameField = QLineEdit(self.centralwidget)
        self.frameField.setObjectName(u"frameField")
        sizePolicy3.setHeightForWidth(self.frameField.sizePolicy().hasHeightForWidth())
        self.frameField.setSizePolicy(sizePolicy3)
        self.frameField.setMinimumSize(QSize(70, 0))
        self.frameField.setMaximumSize(QSize(90, 1000))
        self.frameField.setFont(font)
        self.frameField.setMaxLength(7)
        self.frameField.setAlignment(Qt.AlignRight|Qt.AlignTrailing|Qt.AlignVCenter)

        self.frameContainer.addWidget(self.frameField)


        self.playContainer.addLayout(self.frameContainer)


        self.frameChangeContainer.addLayout(self.playContainer)

        self.frameChangeContainer.setStretch(0, 3)

        self.verticalLayout_4.addLayout(self.frameChangeContainer)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(MainWindow)
        self.menubar.setObjectName(u"menubar")
        self.menubar.setGeometry(QRect(0, 0, 1145, 25))
        self.menubar.setMinimumSize(QSize(0, 0))
        self.menuFile = QMenu(self.menubar)
        self.menuFile.setObjectName(u"menuFile")
        self.menuEdit = QMenu(self.menubar)
        self.menuEdit.setObjectName(u"menuEdit")
        self.menuInterpolation = QMenu(self.menuEdit)
        self.menuInterpolation.setObjectName(u"menuInterpolation")
        self.menuView = QMenu(self.menubar)
        self.menuView.setObjectName(u"menuView")
        self.menuView.setToolTipsVisible(True)
        self.menuHUD = QMenu(self.menuView)
        self.menuHUD.setObjectName(u"menuHUD")
        self.menuPickMode = QMenu(self.menuView)
        self.menuPickMode.setObjectName(u"menuPickMode")
        self.menuSelection_Highlighting = QMenu(self.menuView)
        self.menuSelection_Highlighting.setObjectName(u"menuSelection_Highlighting")
        self.menuHighlightColor = QMenu(self.menuSelection_Highlighting)
        self.menuHighlightColor.setObjectName(u"menuHighlightColor")
        self.menuLights = QMenu(self.menuView)
        self.menuLights.setObjectName(u"menuLights")
        self.menuLights.setEnabled(True)
        self.menuShading_Mode = QMenu(self.menuView)
        self.menuShading_Mode.setObjectName(u"menuShading_Mode")
        self.menuColorCorrection = QMenu(self.menuView)
        self.menuColorCorrection.setObjectName(u"menuColorCorrection")
        self.menuBackground_Color = QMenu(self.menuView)
        self.menuBackground_Color.setObjectName(u"menuBackground_Color")
        self.menuCamera = QMenu(self.menuView)
        self.menuCamera.setObjectName(u"menuCamera")
        self.menuCamera.setTearOffEnabled(True)
        self.menuCameraGuides = QMenu(self.menuView)
        self.menuCameraGuides.setObjectName(u"menuCameraGuides")
        self.menuCameraGuides.setTearOffEnabled(True)
        self.menuCamera_Masking = QMenu(self.menuCameraGuides)
        self.menuCamera_Masking.setObjectName(u"menuCamera_Masking")
        self.menuCamera_Reticles = QMenu(self.menuCameraGuides)
        self.menuCamera_Reticles.setObjectName(u"menuCamera_Reticles")
        self.menuDisplay = QMenu(self.menuView)
        self.menuDisplay.setObjectName(u"menuDisplay")
        self.menuBBox = QMenu(self.menuView)
        self.menuBBox.setObjectName(u"menuBBox")
        self.menuRendererPlugin = QMenu(self.menuView)
        self.menuRendererPlugin.setObjectName(u"menuRendererPlugin")
        self.menuRendererSettings = QMenu(self.menuView)
        self.menuRendererSettings.setObjectName(u"menuRendererSettings")
        self.menuRendererAovs = QMenu(self.menuView)
        self.menuRendererAovs.setObjectName(u"menuRendererAovs")
        self.menuComplexity = QMenu(self.menuView)
        self.menuComplexity.setObjectName(u"menuComplexity")
        self.menuWindow = QMenu(self.menubar)
        self.menuWindow.setObjectName(u"menuWindow")
        self.menuWindow.setMinimumSize(QSize(0, 0))
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(MainWindow)
        self.statusbar.setObjectName(u"statusbar")
        self.statusbar.setSizeGripEnabled(True)
        MainWindow.setStatusBar(self.statusbar)

        self.primViewMenuBar.addAction(self.menuNavigation.menuAction())
        self.primViewMenuBar.addAction(self.menuShow.menuAction())
        self.menuNavigation.addAction(self.actionFind_Prims)
        self.menuNavigation.addAction(self.actionSelect_Stage_Root)
        self.menuNavigation.addAction(self.actionSelect_Model_Root)
        self.menuNavigation.addSeparator()
        self.menuNavigation.addAction(self.actionSelect_Bound_Preview_Material)
        self.menuNavigation.addAction(self.actionSelect_Bound_Full_Material)
        self.menuNavigation.addAction(self.actionSelect_Preview_Binding_Relationship)
        self.menuNavigation.addAction(self.actionSelect_Full_Binding_Relationship)
        self.menuShow.addAction(self.menuPrim_View_Depth.menuAction())
        self.menuShow.addSeparator()
        self.menuShow.addAction(self.actionShow_Inactive_Prims)
        self.menuShow.addAction(self.actionShow_All_Master_Prims)
        self.menuShow.addAction(self.actionShow_Undefined_Prims)
        self.menuShow.addAction(self.actionShow_Abstract_Prims)
        self.menuPrim_View_Depth.addAction(self.actionLevel_1)
        self.menuPrim_View_Depth.addAction(self.actionLevel_2)
        self.menuPrim_View_Depth.addAction(self.actionLevel_3)
        self.menuPrim_View_Depth.addAction(self.actionLevel_4)
        self.menuPrim_View_Depth.addAction(self.actionLevel_5)
        self.menuPrim_View_Depth.addAction(self.actionLevel_6)
        self.menuPrim_View_Depth.addAction(self.actionLevel_7)
        self.menuPrim_View_Depth.addAction(self.actionLevel_8)
        self.menuPrim_View_Depth.addSeparator()
        self.menuPrim_View_Depth.addAction(self.actionExpand_All)
        self.menuPrim_View_Depth.addAction(self.actionCollapse_All)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuWindow.menuAction())
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionReopen_Stage)
        self.menuFile.addAction(self.actionReload_All_Layers)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSave_Overrides_As)
        self.menuFile.addAction(self.actionSave_Flattened_As)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionQuit)
        self.menuEdit.addAction(self.menuInterpolation.menuAction())
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionLoad)
        self.menuEdit.addAction(self.actionUnload)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionActivate)
        self.menuEdit.addAction(self.actionDeactivate)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionMake_Visible)
        self.menuEdit.addAction(self.actionVis_Only)
        self.menuEdit.addAction(self.actionMake_Invisible)
        self.menuEdit.addAction(self.actionRemove_Session_Visibility)
        self.menuEdit.addAction(self.actionReset_All_Session_Visibility)
        self.menuView.addAction(self.actionToggle_Viewer_Mode)
        self.menuView.addSeparator()
        self.menuView.addAction(self.menuRendererPlugin.menuAction())
        self.menuView.addAction(self.menuRendererSettings.menuAction())
        self.menuView.addAction(self.menuRendererAovs.menuAction())
        self.menuView.addAction(self.actionPause)
        self.menuView.addAction(self.actionStop)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionReset_View)
        self.menuView.addAction(self.actionAdjust_FOV)
        self.menuView.addAction(self.actionAuto_Compute_Clipping_Planes)
        self.menuView.addAction(self.actionAdjust_Clipping)
        self.menuView.addAction(self.actionAdjust_Default_Material)
        self.menuView.addAction(self.menuComplexity.menuAction())
        self.menuView.addAction(self.menuBBox.menuAction())
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionToggle_Framed_View)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionFrame_Forward)
        self.menuView.addAction(self.actionFrame_Backwards)
        self.menuView.addSeparator()
        self.menuView.addAction(self.menuShading_Mode.menuAction())
        self.menuView.addAction(self.menuColorCorrection.menuAction())
        self.menuView.addAction(self.menuLights.menuAction())
        self.menuView.addAction(self.menuBackground_Color.menuAction())
        self.menuView.addAction(self.menuCamera.menuAction())
        self.menuView.addAction(self.menuCameraGuides.menuAction())
        self.menuView.addAction(self.menuDisplay.menuAction())
        self.menuView.addSeparator()
        self.menuView.addAction(self.menuHUD.menuAction())
        self.menuView.addSeparator()
        self.menuView.addAction(self.menuPickMode.menuAction())
        self.menuView.addAction(self.menuSelection_Highlighting.menuAction())
        self.menuView.addAction(self.actionRollover_Prim_Info)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionEnable_Scene_Materials)
        self.menuView.addAction(self.actionDisplay_PrimId)
        self.menuView.addAction(self.actionCull_Backfaces)
        self.menuHUD.addAction(self.actionHUD)
        self.menuHUD.addSeparator()
        self.menuHUD.addAction(self.actionHUD_Info)
        self.menuHUD.addAction(self.actionHUD_Complexity)
        self.menuHUD.addAction(self.actionHUD_Performance)
        self.menuHUD.addAction(self.actionHUD_GPUstats)
        self.menuPickMode.addAction(self.actionPick_Prims)
        self.menuPickMode.addAction(self.actionPick_Models)
        self.menuPickMode.addAction(self.actionPick_Instances)
        self.menuPickMode.addAction(self.actionPick_Prototypes)
        self.menuSelection_Highlighting.addAction(self.actionNever)
        self.menuSelection_Highlighting.addAction(self.actionOnly_when_paused)
        self.menuSelection_Highlighting.addAction(self.actionAlways)
        self.menuSelection_Highlighting.addAction(self.menuHighlightColor.menuAction())
        self.menuHighlightColor.addAction(self.actionSelYellow)
        self.menuHighlightColor.addAction(self.actionSelWhite)
        self.menuHighlightColor.addAction(self.actionSelCyan)
        self.menuLights.addAction(self.actionAmbient_Only)
        self.menuLights.addAction(self.actionDomeLight)
        self.menuShading_Mode.addAction(self.actionWireframe)
        self.menuShading_Mode.addAction(self.actionWireframeOnSurface)
        self.menuShading_Mode.addAction(self.actionSmooth_Shaded)
        self.menuShading_Mode.addAction(self.actionFlat_Shaded)
        self.menuShading_Mode.addAction(self.actionPoints)
        self.menuShading_Mode.addAction(self.actionGeom_Only)
        self.menuShading_Mode.addAction(self.actionGeom_Smooth)
        self.menuShading_Mode.addAction(self.actionGeom_Flat)
        self.menuShading_Mode.addAction(self.actionHidden_Surface_Wireframe)
        self.menuColorCorrection.addAction(self.actionNoColorCorrection)
        self.menuColorCorrection.addAction(self.actionSRGBColorCorrection)
        self.menuColorCorrection.addAction(self.actionOpenColorIO)
        self.menuBackground_Color.addAction(self.actionBlack)
        self.menuBackground_Color.addAction(self.actionGrey_Dark)
        self.menuBackground_Color.addAction(self.actionGrey_Light)
        self.menuBackground_Color.addAction(self.actionWhite)
        self.menuCamera.addAction(self.actionFreeCam)
        self.menuCameraGuides.addAction(self.actionCameraMask_Outline)
        self.menuCameraGuides.addAction(self.actionDisplay_Camera_Oracles)
        self.menuCameraGuides.addAction(self.menuCamera_Masking.menuAction())
        self.menuCameraGuides.addAction(self.menuCamera_Reticles.menuAction())
        self.menuCamera_Masking.addAction(self.actionCameraMask_Full)
        self.menuCamera_Masking.addAction(self.actionCameraMask_Partial)
        self.menuCamera_Masking.addAction(self.actionCameraMask_None)
        self.menuCamera_Masking.addSeparator()
        self.menuCamera_Masking.addAction(self.actionCameraMask_Color)
        self.menuCamera_Reticles.addAction(self.actionCameraReticles_Inside)
        self.menuCamera_Reticles.addAction(self.actionCameraReticles_Outside)
        self.menuCamera_Reticles.addSeparator()
        self.menuCamera_Reticles.addAction(self.actionCameraReticles_Color)
        self.menuDisplay.addAction(self.actionDisplay_Guide)
        self.menuDisplay.addAction(self.actionDisplay_Proxy)
        self.menuDisplay.addAction(self.actionDisplay_Render)
        self.menuBBox.addAction(self.showBBoxes)
        self.menuBBox.addSeparator()
        self.menuBBox.addAction(self.showAABBox)
        self.menuBBox.addAction(self.showOBBox)
        self.menuBBox.addAction(self.showBBoxPlayback)
        self.menuBBox.addSeparator()
        self.menuBBox.addAction(self.useExtentsHint)
        self.menuComplexity.addAction(self.actionLow)
        self.menuComplexity.addAction(self.actionMedium)
        self.menuComplexity.addAction(self.actionHigh)
        self.menuComplexity.addAction(self.actionVery_High)
        self.menuWindow.addAction(self.showInterpreter)
        self.menuWindow.addAction(self.actionPreferences)
        self.menuWindow.addAction(self.showDebugFlags)

        self.retranslateUi(MainWindow)

        self.propertyInspector.setCurrentIndex(0)


        QMetaObject.connectSlotsByName(MainWindow)
    # setupUi

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QCoreApplication.translate("MainWindow", u"MainWindow", None))
        MainWindow.setProperty("comment", QCoreApplication.translate("MainWindow", u"\n"
"     PLEASE DO NOT HAND EDIT THIS FILE, AS ITS XML FORMAT IS FRAGILE AND QT'S\n"
"     TOOLS ARE INCONSISTENT ACROSS PLATFORMS ON TOLERANCE TO BAD CONSTRUCTS.\n"
"     \n"
"     Instead prefer qdesigner5 to make edits to the document.  If you are \n"
"     allergic to gui tools, then AT LEAST, after making hand edits, prior to\n"
"     checking them in, load this file in qdesigner5, ensure it loads without \n"
"     error, and then SAVE THE FILE BACK OUT, AND CHECK THAT IN, so that the\n"
"     next developer using qdesigner5 does not contend with unrelated diffs.\n"
"     \n"
"     Copyright 2016 Pixar                                                                   \n"
"                                                                                            \n"
"     Licensed under the Apache License, Version 2.0 (the \"Apache License\")      \n"
"     with the following modification; you may not use this file except in                   \n"
"     compliance with the Apache License and the following"
                        " modification to it:               \n"
"     Section 6. Trademarks. is deleted and replaced with:                                   \n"
"                                                                                            \n"
"     6. Trademarks. This License does not grant permission to use the trade                 \n"
"        names, trademarks, service marks, or product names of the Licensor                  \n"
"        and its affiliates, except as required to comply with Section 4(c) of               \n"
"        the License and to reproduce the content of the NOTICE file.                        \n"
"                                                                                            \n"
"     You may obtain a copy of the Apache License at                                         \n"
"                                                                                            \n"
"         http://www.apache.org/licenses/LICENSE-2.0                                         \n"
"               "
                        "                                                                             \n"
"     Unless required by applicable law or agreed to in writing, software                    \n"
"     distributed under the Apache License with the above modification is                    \n"
"     distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY   \n"
"     KIND, either express or implied. See the Apache License for the specific               \n"
"     language governing permissions and limitations under the Apache License.               \n"
"  ", None))
        self.actionOpen.setText(QCoreApplication.translate("MainWindow", u"Open", None))
#if QT_CONFIG(shortcut)
        self.actionOpen.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+O", None))
#endif // QT_CONFIG(shortcut)
        self.actionQuit.setText(QCoreApplication.translate("MainWindow", u"Quit", None))
#if QT_CONFIG(shortcut)
        self.actionQuit.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Q", None))
#endif // QT_CONFIG(shortcut)
        self.actionPause.setText(QCoreApplication.translate("MainWindow", u"Pause Render", None))
#if QT_CONFIG(shortcut)
        self.actionPause.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+P", None))
#endif // QT_CONFIG(shortcut)
        self.actionStop.setText(QCoreApplication.translate("MainWindow", u"Stop Render", None))
#if QT_CONFIG(shortcut)
        self.actionStop.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+\\", None))
#endif // QT_CONFIG(shortcut)
        self.actionReset_View.setText(QCoreApplication.translate("MainWindow", u"Reset View", None))
        self.actionToggle_Framed_View.setText(QCoreApplication.translate("MainWindow", u"Toggle Framed View", None))
#if QT_CONFIG(tooltip)
        self.actionToggle_Framed_View.setToolTip(QCoreApplication.translate("MainWindow", u"Toggle camera with view saved before last Frame operation", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionToggle_Framed_View.setShortcut(QCoreApplication.translate("MainWindow", u"J", None))
#endif // QT_CONFIG(shortcut)
        self.actionWatch_Window.setText(QCoreApplication.translate("MainWindow", u"Watch Window", None))
#if QT_CONFIG(shortcut)
        self.actionWatch_Window.setShortcut(QCoreApplication.translate("MainWindow", u"W", None))
#endif // QT_CONFIG(shortcut)
        self.actionFrame_Forward.setText(QCoreApplication.translate("MainWindow", u"Frame Forward", None))
        self.actionFrame_Backwards.setText(QCoreApplication.translate("MainWindow", u"Frame Backward", None))
        self.actionAdjust_FOV.setText(QCoreApplication.translate("MainWindow", u"Adjust FO&V...", None))
#if QT_CONFIG(shortcut)
        self.actionAdjust_FOV.setShortcut("")
#endif // QT_CONFIG(shortcut)
        self.actionReopen_Stage.setText(QCoreApplication.translate("MainWindow", u"Reopen Stage", None))
        self.actionDump_RIB.setText(QCoreApplication.translate("MainWindow", u"Dump RIB...", None))
        self.actionLevel_1.setText(QCoreApplication.translate("MainWindow", u"Level 1", None))
#if QT_CONFIG(shortcut)
        self.actionLevel_1.setShortcut(QCoreApplication.translate("MainWindow", u"Alt+1", None))
#endif // QT_CONFIG(shortcut)
        self.actionLevel_2.setText(QCoreApplication.translate("MainWindow", u"Level 2", None))
#if QT_CONFIG(shortcut)
        self.actionLevel_2.setShortcut(QCoreApplication.translate("MainWindow", u"Alt+2", None))
#endif // QT_CONFIG(shortcut)
        self.actionLevel_3.setText(QCoreApplication.translate("MainWindow", u"Level 3", None))
#if QT_CONFIG(shortcut)
        self.actionLevel_3.setShortcut(QCoreApplication.translate("MainWindow", u"Alt+3", None))
#endif // QT_CONFIG(shortcut)
        self.actionLevel_4.setText(QCoreApplication.translate("MainWindow", u"Level 4", None))
#if QT_CONFIG(shortcut)
        self.actionLevel_4.setShortcut(QCoreApplication.translate("MainWindow", u"Alt+4", None))
#endif // QT_CONFIG(shortcut)
        self.actionLevel_5.setText(QCoreApplication.translate("MainWindow", u"Level 5", None))
#if QT_CONFIG(shortcut)
        self.actionLevel_5.setShortcut(QCoreApplication.translate("MainWindow", u"Alt+5", None))
#endif // QT_CONFIG(shortcut)
        self.actionExpand_All.setText(QCoreApplication.translate("MainWindow", u"Expand All", None))
#if QT_CONFIG(shortcut)
        self.actionExpand_All.setShortcut(QCoreApplication.translate("MainWindow", u"Alt+9", None))
#endif // QT_CONFIG(shortcut)
        self.actionCollapse_All.setText(QCoreApplication.translate("MainWindow", u"Collapse All", None))
#if QT_CONFIG(shortcut)
        self.actionCollapse_All.setShortcut(QCoreApplication.translate("MainWindow", u"Alt+0", None))
#endif // QT_CONFIG(shortcut)
        self.actionAmbient_Only.setText(QCoreApplication.translate("MainWindow", u"Camera Light", None))
        self.actionDomeLight.setText(QCoreApplication.translate("MainWindow", u"Dome Light", None))
        self.actionLevel_6.setText(QCoreApplication.translate("MainWindow", u"Level 6", None))
#if QT_CONFIG(shortcut)
        self.actionLevel_6.setShortcut(QCoreApplication.translate("MainWindow", u"Alt+6", None))
#endif // QT_CONFIG(shortcut)
        self.actionLevel_7.setText(QCoreApplication.translate("MainWindow", u"Level 7", None))
#if QT_CONFIG(shortcut)
        self.actionLevel_7.setShortcut(QCoreApplication.translate("MainWindow", u"Alt+7", None))
#endif // QT_CONFIG(shortcut)
        self.actionLevel_8.setText(QCoreApplication.translate("MainWindow", u"Level 8", None))
#if QT_CONFIG(shortcut)
        self.actionLevel_8.setShortcut(QCoreApplication.translate("MainWindow", u"Alt+8", None))
#endif // QT_CONFIG(shortcut)
        self.actionWireframe.setText(QCoreApplication.translate("MainWindow", u"Wireframe", None))
#if QT_CONFIG(shortcut)
        self.actionWireframe.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+0", None))
#endif // QT_CONFIG(shortcut)
        self.actionWireframeOnSurface.setText(QCoreApplication.translate("MainWindow", u"WireframeOnSurface", None))
#if QT_CONFIG(shortcut)
        self.actionWireframeOnSurface.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+1", None))
#endif // QT_CONFIG(shortcut)
        self.actionSmooth_Shaded.setText(QCoreApplication.translate("MainWindow", u"Smooth Shaded", None))
#if QT_CONFIG(shortcut)
        self.actionSmooth_Shaded.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+2", None))
#endif // QT_CONFIG(shortcut)
        self.actionFlat_Shaded.setText(QCoreApplication.translate("MainWindow", u"Flat Shaded", None))
#if QT_CONFIG(shortcut)
        self.actionFlat_Shaded.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+3", None))
#endif // QT_CONFIG(shortcut)
        self.actionPoints.setText(QCoreApplication.translate("MainWindow", u"Points", None))
#if QT_CONFIG(shortcut)
        self.actionPoints.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+4", None))
#endif // QT_CONFIG(shortcut)
        self.actionGeom_Only.setText(QCoreApplication.translate("MainWindow", u"Geom Only", None))
#if QT_CONFIG(shortcut)
        self.actionGeom_Only.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+6", None))
#endif // QT_CONFIG(shortcut)
        self.actionRedrawOnScrub.setText(QCoreApplication.translate("MainWindow", u"Redraw While Frame Scrubbing", None))
        self.actionIncrementComplexity1.setText(QCoreApplication.translate("MainWindow", u"IncrementComplexity", None))
#if QT_CONFIG(shortcut)
        self.actionIncrementComplexity1.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+=", None))
#endif // QT_CONFIG(shortcut)
        self.actionDecrementComplexity.setText(QCoreApplication.translate("MainWindow", u"DecrementComplexity", None))
#if QT_CONFIG(shortcut)
        self.actionDecrementComplexity.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+-", None))
#endif // QT_CONFIG(shortcut)
        self.actionPRMan.setText(QCoreApplication.translate("MainWindow", u"Render View", None))
#if QT_CONFIG(shortcut)
        self.actionPRMan.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+R", None))
#endif // QT_CONFIG(shortcut)
        self.actionBlack.setText(QCoreApplication.translate("MainWindow", u"Black", None))
#if QT_CONFIG(statustip)
        self.actionBlack.setStatusTip("")
#endif // QT_CONFIG(statustip)
        self.actionWhite.setText(QCoreApplication.translate("MainWindow", u"White", None))
#if QT_CONFIG(statustip)
        self.actionWhite.setStatusTip("")
#endif // QT_CONFIG(statustip)
        self.actionGrey_Light.setText(QCoreApplication.translate("MainWindow", u"Grey (Light)", None))
#if QT_CONFIG(statustip)
        self.actionGrey_Light.setStatusTip("")
#endif // QT_CONFIG(statustip)
        self.actionGrey_Dark.setText(QCoreApplication.translate("MainWindow", u"Grey (Dark)", None))
#if QT_CONFIG(statustip)
        self.actionGrey_Dark.setStatusTip("")
#endif // QT_CONFIG(statustip)
        self.actionGeom_Smooth.setText(QCoreApplication.translate("MainWindow", u"Geom Smooth", None))
#if QT_CONFIG(shortcut)
        self.actionGeom_Smooth.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+7", None))
#endif // QT_CONFIG(shortcut)
        self.actionGeom_Flat.setText(QCoreApplication.translate("MainWindow", u"Geom Flat", None))
#if QT_CONFIG(shortcut)
        self.actionGeom_Flat.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+8", None))
#endif // QT_CONFIG(shortcut)
        self.actionHidden_Surface_Wireframe.setText(QCoreApplication.translate("MainWindow", u"Hidden Surface Wireframe", None))
#if QT_CONFIG(shortcut)
        self.actionHidden_Surface_Wireframe.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+9", None))
#endif // QT_CONFIG(shortcut)
        self.actionNoColorCorrection.setText(QCoreApplication.translate("MainWindow", u"disabled", None))
        self.actionSRGBColorCorrection.setText(QCoreApplication.translate("MainWindow", u"sRGB", None))
        self.actionOpenColorIO.setText(QCoreApplication.translate("MainWindow", u"openColorIO", None))
        self.actionFreeCam.setText(QCoreApplication.translate("MainWindow", u"Free Camera", None))
        self.actionSave_Overrides_As.setText(QCoreApplication.translate("MainWindow", u"Save Overrides As...", None))
        self.actionSave_Overrides_As.setIconText(QCoreApplication.translate("MainWindow", u"Save Overrides As...", None))
#if QT_CONFIG(tooltip)
        self.actionSave_Overrides_As.setToolTip(QCoreApplication.translate("MainWindow", u"Save property and metadata overrides", None))
#endif // QT_CONFIG(tooltip)
        self.actionSave_Flattened_As.setText(QCoreApplication.translate("MainWindow", u"Save Flattened As...", None))
        self.actionSave_Flattened_As.setIconText(QCoreApplication.translate("MainWindow", u"Save Flattened As...", None))
#if QT_CONFIG(tooltip)
        self.actionSave_Flattened_As.setToolTip(QCoreApplication.translate("MainWindow", u"Save a flattened version of the current stage", None))
#endif // QT_CONFIG(tooltip)
        self.showInterpreter.setText(QCoreApplication.translate("MainWindow", u"Interpreter", None))
#if QT_CONFIG(tooltip)
        self.showInterpreter.setToolTip(QCoreApplication.translate("MainWindow", u"Show Python interpreter console", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.showInterpreter.setShortcut(QCoreApplication.translate("MainWindow", u"I", None))
#endif // QT_CONFIG(shortcut)
        self.showDebugFlags.setText(QCoreApplication.translate("MainWindow", u"Debug Flags", None))
#if QT_CONFIG(tooltip)
        self.showDebugFlags.setToolTip(QCoreApplication.translate("MainWindow", u"Show Debug Flags Window", None))
#endif // QT_CONFIG(tooltip)
        self.actionHUD_VBOInfo.setText(QCoreApplication.translate("MainWindow", u"VBO Info (Quads/Tris)", None))
        self.actionHUD_Info.setText(QCoreApplication.translate("MainWindow", u"Subtree Info (Slow)", None))
        self.actionHUD_VBO.setText(QCoreApplication.translate("MainWindow", u"VBO Info", None))
        self.actionHUD_Complexity.setText(QCoreApplication.translate("MainWindow", u"Camera/Complexity", None))
        self.actionHUD_Performance.setText(QCoreApplication.translate("MainWindow", u"Performance", None))
        self.actionHUD_GPUstats.setText(QCoreApplication.translate("MainWindow", u"GPU stats", None))
        self.actionHUD.setText(QCoreApplication.translate("MainWindow", u"Show HUD", None))
#if QT_CONFIG(shortcut)
        self.actionHUD.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+D", None))
#endif // QT_CONFIG(shortcut)
        self.actionCameraMask_Outline.setText(QCoreApplication.translate("MainWindow", u"Camera Frame", None))
        self.actionDisplay_Guide.setText(QCoreApplication.translate("MainWindow", u"Guide", None))
        self.actionDisplay_Render.setText(QCoreApplication.translate("MainWindow", u"Render", None))
        self.actionDisplay_PrimId.setText(QCoreApplication.translate("MainWindow", u"Display Prim Id", None))
        self.actionEnable_Scene_Materials.setText(QCoreApplication.translate("MainWindow", u"Enable Scene Materials", None))
        self.actionShow_Inactive_Prims.setText(QCoreApplication.translate("MainWindow", u"Inactive Prims", None))
        self.showAABBox.setText(QCoreApplication.translate("MainWindow", u"Show Axis-Aligned", None))
        self.showOBBox.setText(QCoreApplication.translate("MainWindow", u"Show Oriented", None))
        self.showBBoxPlayback.setText(QCoreApplication.translate("MainWindow", u"Show During Playback/Scrub", None))
        self.showBBoxes.setText(QCoreApplication.translate("MainWindow", u"Show Bounding Boxes", None))
#if QT_CONFIG(shortcut)
        self.showBBoxes.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+B", None))
#endif // QT_CONFIG(shortcut)
        self.actionVersion_Info.setText(QCoreApplication.translate("MainWindow", u"Version Info", None))
#if QT_CONFIG(shortcut)
        self.actionVersion_Info.setShortcut(QCoreApplication.translate("MainWindow", u"V", None))
#endif // QT_CONFIG(shortcut)
        self.actionAdjust_Clipping.setText(QCoreApplication.translate("MainWindow", u"Adjust Clipping Planes...", None))
        self.actionIncrementComplexity2.setText(QCoreApplication.translate("MainWindow", u"IncrementComplexity", None))
#if QT_CONFIG(shortcut)
        self.actionIncrementComplexity2.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl++", None))
#endif // QT_CONFIG(shortcut)
        self.actionCull_Backfaces.setText(QCoreApplication.translate("MainWindow", u"Cull Backfaces (GL)", None))
        self.actionSave_Overrides_To_Scene.setText(QCoreApplication.translate("MainWindow", u"Save Overrides To Scene", None))
        self.actionMake_Visible.setText(QCoreApplication.translate("MainWindow", u"Make Visible", None))
#if QT_CONFIG(shortcut)
        self.actionMake_Visible.setShortcut(QCoreApplication.translate("MainWindow", u"Shift+H", None))
#endif // QT_CONFIG(shortcut)
        self.actionMake_Invisible.setText(QCoreApplication.translate("MainWindow", u"Make Invisible", None))
#if QT_CONFIG(shortcut)
        self.actionMake_Invisible.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+H", None))
#endif // QT_CONFIG(shortcut)
        self.actionRemove_Session_Visibility.setText(QCoreApplication.translate("MainWindow", u"Remove Session Visibility", None))
#if QT_CONFIG(shortcut)
        self.actionRemove_Session_Visibility.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+U", None))
#endif // QT_CONFIG(shortcut)
        self.actionActivate.setText(QCoreApplication.translate("MainWindow", u"Activate", None))
        self.actionDeactivate.setText(QCoreApplication.translate("MainWindow", u"Deactivate", None))
        self.actionSelect_Model_Root.setText(QCoreApplication.translate("MainWindow", u"Select Enclosing Model", None))
#if QT_CONFIG(shortcut)
        self.actionSelect_Model_Root.setShortcut(QCoreApplication.translate("MainWindow", u"\\", None))
#endif // QT_CONFIG(shortcut)
        self.actionRefresh_Procedurals.setText(QCoreApplication.translate("MainWindow", u"Refresh Procedurals", None))
        self.actionReload_All_Layers.setText(QCoreApplication.translate("MainWindow", u"Reload All Layers", None))
#if QT_CONFIG(shortcut)
        self.actionReload_All_Layers.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+R", None))
#endif // QT_CONFIG(shortcut)
        self.actionHD_Flags.setText(QCoreApplication.translate("MainWindow", u"HD Flags", None))
        self.actionHD_Flags_2.setText(QCoreApplication.translate("MainWindow", u"HD Flags", None))
        self.actionHD_Flags_3.setText(QCoreApplication.translate("MainWindow", u"HD Flags", None))
        self.actionMenu.setText(QCoreApplication.translate("MainWindow", u"Menu", None))
        self.actionSdf.setText(QCoreApplication.translate("MainWindow", u"sdf", None))
        self.actionGeom_Id.setText(QCoreApplication.translate("MainWindow", u"Geom Id", None))
        self.actionShow_All_Master_Prims.setText(QCoreApplication.translate("MainWindow", u"Master Prims", None))
        self.actionShow_Undefined_Prims.setText(QCoreApplication.translate("MainWindow", u"Undefined Prims (Overs)", None))
        self.actionShow_Abstract_Prims.setText(QCoreApplication.translate("MainWindow", u"Abstract Prims (Classes)", None))
        self.actionPick_Prims.setText(QCoreApplication.translate("MainWindow", u"Prims", None))
        self.actionPick_Models.setText(QCoreApplication.translate("MainWindow", u"Models", None))
        self.actionPick_Instances.setText(QCoreApplication.translate("MainWindow", u"Instances", None))
        self.actionPick_Prototypes.setText(QCoreApplication.translate("MainWindow", u"Prototypes", None))
        self.actionToggle_Viewer_Mode.setText(QCoreApplication.translate("MainWindow", u"Toggle Viewer Mode", None))
#if QT_CONFIG(shortcut)
        self.actionToggle_Viewer_Mode.setShortcut(QCoreApplication.translate("MainWindow", u"F11", None))
#endif // QT_CONFIG(shortcut)
        self.useExtentsHint.setText(QCoreApplication.translate("MainWindow", u"Use Extents Hints", None))
        self.actionNever.setText(QCoreApplication.translate("MainWindow", u"Never", None))
        self.actionOnly_when_paused.setText(QCoreApplication.translate("MainWindow", u"Only when paused", None))
#if QT_CONFIG(tooltip)
        self.actionOnly_when_paused.setToolTip(QCoreApplication.translate("MainWindow", u"Do not draw selection highlights during playback", None))
#endif // QT_CONFIG(tooltip)
        self.actionAlways.setText(QCoreApplication.translate("MainWindow", u"Always", None))
#if QT_CONFIG(tooltip)
        self.actionAlways.setToolTip(QCoreApplication.translate("MainWindow", u"Draw selection highlights even during plaback", None))
#endif // QT_CONFIG(tooltip)
        self.actionSelYellow.setText(QCoreApplication.translate("MainWindow", u"Yellow", None))
        self.actionSelWhite.setText(QCoreApplication.translate("MainWindow", u"White", None))
        self.actionSelCyan.setText(QCoreApplication.translate("MainWindow", u"Cyan", None))
        self.actionVis_Only.setText(QCoreApplication.translate("MainWindow", u"Vis Only", None))
#if QT_CONFIG(shortcut)
        self.actionVis_Only.setShortcut(QCoreApplication.translate("MainWindow", u"Alt+H", None))
#endif // QT_CONFIG(shortcut)
        self.actionReset_All_Session_Visibility.setText(QCoreApplication.translate("MainWindow", u"Reset All Session Visibility", None))
#if QT_CONFIG(shortcut)
        self.actionReset_All_Session_Visibility.setShortcut(QCoreApplication.translate("MainWindow", u"Shift+U", None))
#endif // QT_CONFIG(shortcut)
        self.actionLoad.setText(QCoreApplication.translate("MainWindow", u"Load", None))
        self.actionUnload.setText(QCoreApplication.translate("MainWindow", u"Unload", None))
        self.actionSelect_Bound_Preview_Material.setText(QCoreApplication.translate("MainWindow", u"Select Bound Preview Material", None))
#if QT_CONFIG(shortcut)
        self.actionSelect_Bound_Preview_Material.setShortcut(QCoreApplication.translate("MainWindow", u"Shift+L", None))
#endif // QT_CONFIG(shortcut)
        self.actionRollover_Prim_Info.setText(QCoreApplication.translate("MainWindow", u"Rollover Prim Info", None))
#if QT_CONFIG(shortcut)
        self.actionRollover_Prim_Info.setShortcut(QCoreApplication.translate("MainWindow", u"Shift+I", None))
#endif // QT_CONFIG(shortcut)
        self.actionAuto_Compute_Clipping_Planes.setText(QCoreApplication.translate("MainWindow", u"Auto Compute Clipping Planes", None))
#if QT_CONFIG(tooltip)
        self.actionAuto_Compute_Clipping_Planes.setToolTip(QCoreApplication.translate("MainWindow", u"<html><head/><body><p><span style=\" font-weight:600; text-decoration: underline;\">Auto Clipping</span></p><p><span style=\" font-weight:400;\">Expansive scenes may show &quot;Z-fighting&quot;, where nearby surfaces pop or shimmer.  </span><span style=\" font-weight:600;\">Auto Compute Clipping Planes</span><span style=\" font-weight:400;\"> adjusts the camera's clipping planes to fix this.  When enabled, the </span><span style=\" font-weight:600;\">Frame Selected</span><span style=\" font-weight:400;\"> command readjusts clip planes too.</span></p><p><span style=\" font-weight:400;\">Leaving and then re-entering this mode will reset the view used to optimize the clipping planes.</span></p><p><span style=\" font-weight:400;\">Auto clipping is not useful in all situations, such as animated scenes in which the &quot;extent&quot; of the scene changes over time, and for close-up work.</span></p></body></html>", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionAuto_Compute_Clipping_Planes.setShortcut(QCoreApplication.translate("MainWindow", u"C", None))
#endif // QT_CONFIG(shortcut)
        self.actionFind_Prims.setText(QCoreApplication.translate("MainWindow", u"Find Prims", None))
#if QT_CONFIG(shortcut)
        self.actionFind_Prims.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+F", None))
#endif // QT_CONFIG(shortcut)
        self.actionSelect_Stage_Root.setText(QCoreApplication.translate("MainWindow", u"Select Stage Root", None))
#if QT_CONFIG(shortcut)
        self.actionSelect_Stage_Root.setShortcut(QCoreApplication.translate("MainWindow", u"|", None))
#endif // QT_CONFIG(shortcut)
        self.actionDisplay_Camera_Oracles.setText(QCoreApplication.translate("MainWindow", u"Camera Oracles", None))
        self.actionDisplay_Proxy.setText(QCoreApplication.translate("MainWindow", u"Proxy", None))
        self.actionAdjust_Default_Material.setText(QCoreApplication.translate("MainWindow", u"Adjust Default Material...", None))
        self.actionCameraReticles_Inside.setText(QCoreApplication.translate("MainWindow", u"Camera Reticles Inside", None))
        self.actionCameraReticles_Outside.setText(QCoreApplication.translate("MainWindow", u"Camera Reticles Outside", None))
        self.actionCameraReticles_Color.setText(QCoreApplication.translate("MainWindow", u"Select Color...", None))
        self.actionLow.setText(QCoreApplication.translate("MainWindow", u"Low", None))
        self.actionMedium.setText(QCoreApplication.translate("MainWindow", u"Medium", None))
        self.actionHigh.setText(QCoreApplication.translate("MainWindow", u"High", None))
        self.actionVery_High.setText(QCoreApplication.translate("MainWindow", u"Very High", None))
        self.actionSelect_Bound_Full_Material.setText(QCoreApplication.translate("MainWindow", u"Select Bound Full Material", None))
        self.actionSelect_Preview_Binding_Relationship.setText(QCoreApplication.translate("MainWindow", u"Select Preview Binding Relationship", None))
        self.actionSelect_Full_Binding_Relationship.setText(QCoreApplication.translate("MainWindow", u"Select Full Binding Relationship", None))
        self.actionPreferences.setText(QCoreApplication.translate("MainWindow", u"Preferences", None))
        self.actionCameraMask_Full.setText(QCoreApplication.translate("MainWindow", u"Full Mask", None))
        self.actionCameraMask_Partial.setText(QCoreApplication.translate("MainWindow", u"Partial Mask", None))
        self.actionCameraMask_None.setText(QCoreApplication.translate("MainWindow", u"No Mask", None))
        self.actionCameraMask_Color.setText(QCoreApplication.translate("MainWindow", u"Select Color...", None))
#if QT_CONFIG(statustip)
        self.centralwidget.setStatusTip("")
#endif // QT_CONFIG(statustip)
        self.menuNavigation.setTitle(QCoreApplication.translate("MainWindow", u"&Navigation", None))
        self.menuShow.setTitle(QCoreApplication.translate("MainWindow", u"&Show", None))
        self.menuPrim_View_Depth.setTitle(QCoreApplication.translate("MainWindow", u"Prim View Depth", None))
        ___qtreewidgetitem = self.primView.headerItem()
        ___qtreewidgetitem.setText(3, QCoreApplication.translate("MainWindow", u"Draw Mode", None));
        ___qtreewidgetitem.setText(2, QCoreApplication.translate("MainWindow", u"Vis", None));
        ___qtreewidgetitem.setText(1, QCoreApplication.translate("MainWindow", u"Type", None));
        ___qtreewidgetitem.setText(0, QCoreApplication.translate("MainWindow", u"Prim Name", None));
#if QT_CONFIG(tooltip)
        self.primLegendQButton.setToolTip(QCoreApplication.translate("MainWindow", u"Prim legend", None))
#endif // QT_CONFIG(tooltip)
        self.primLegendQButton.setText(QCoreApplication.translate("MainWindow", u"?", None))
        self.primViewLineEdit.setPlaceholderText(QCoreApplication.translate("MainWindow", u"Search for prim by name", None))
#if QT_CONFIG(tooltip)
        self.primViewFindNext.setToolTip(QCoreApplication.translate("MainWindow", u"Find and select the next match (looping)", None))
#endif // QT_CONFIG(tooltip)
        self.primViewFindNext.setText(QCoreApplication.translate("MainWindow", u"Find Prim", None))
        ___qtreewidgetitem1 = self.propertyView.headerItem()
        ___qtreewidgetitem1.setText(2, QCoreApplication.translate("MainWindow", u"Value", None));
        ___qtreewidgetitem1.setText(1, QCoreApplication.translate("MainWindow", u"Property Name", None));
        ___qtreewidgetitem1.setText(0, QCoreApplication.translate("MainWindow", u"Type", None));
#if QT_CONFIG(tooltip)
        self.propertyView.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(tooltip)
        self.propertyLegendQButton.setToolTip(QCoreApplication.translate("MainWindow", u"Property legend", None))
#endif // QT_CONFIG(tooltip)
        self.propertyLegendQButton.setText(QCoreApplication.translate("MainWindow", u"?", None))
        self.attrViewLineEdit.setPlaceholderText(QCoreApplication.translate("MainWindow", u"Search for property by name", None))
        self.attrViewFindNext.setText(QCoreApplication.translate("MainWindow", u"Find Prop", None))
        self.propertyInspector.setTabText(self.propertyInspector.indexOf(self.value), QCoreApplication.translate("MainWindow", u"Value", None))
        ___qtablewidgetitem = self.metadataView.horizontalHeaderItem(0)
        ___qtablewidgetitem.setText(QCoreApplication.translate("MainWindow", u"Field Name", None));
        ___qtablewidgetitem1 = self.metadataView.horizontalHeaderItem(1)
        ___qtablewidgetitem1.setText(QCoreApplication.translate("MainWindow", u"Value", None));
#if QT_CONFIG(tooltip)
        self.metadataView.setToolTip("")
#endif // QT_CONFIG(tooltip)
        self.propertyInspector.setTabText(self.propertyInspector.indexOf(self.metadata), QCoreApplication.translate("MainWindow", u"Meta Data", None))
        ___qtablewidgetitem2 = self.layerStackView.horizontalHeaderItem(0)
        ___qtablewidgetitem2.setText(QCoreApplication.translate("MainWindow", u"Layer", None));
        ___qtablewidgetitem3 = self.layerStackView.horizontalHeaderItem(1)
        ___qtablewidgetitem3.setText(QCoreApplication.translate("MainWindow", u"Path", None));
        ___qtablewidgetitem4 = self.layerStackView.horizontalHeaderItem(2)
        ___qtablewidgetitem4.setText(QCoreApplication.translate("MainWindow", u"Value", None));
#if QT_CONFIG(tooltip)
        self.layerStackView.setToolTip("")
#endif // QT_CONFIG(tooltip)
        self.propertyInspector.setTabText(self.propertyInspector.indexOf(self.layerstack), QCoreApplication.translate("MainWindow", u"Layer Stack", None))
        ___qtreewidgetitem2 = self.compositionTreeWidget.headerItem()
        ___qtreewidgetitem2.setText(3, QCoreApplication.translate("MainWindow", u"Has Spec", None));
        ___qtreewidgetitem2.setText(2, QCoreApplication.translate("MainWindow", u"Arc Path", None));
        ___qtreewidgetitem2.setText(1, QCoreApplication.translate("MainWindow", u"Arc Type", None));
        ___qtreewidgetitem2.setText(0, QCoreApplication.translate("MainWindow", u"Layer", None));
        self.propertyInspector.setTabText(self.propertyInspector.indexOf(self.tab), QCoreApplication.translate("MainWindow", u"Composition", None))
#if QT_CONFIG(tooltip)
        self.stageBegin.setToolTip(QCoreApplication.translate("MainWindow", u"Stage Start Frame", None))
#endif // QT_CONFIG(tooltip)
        self.stageBegin.setText(QCoreApplication.translate("MainWindow", u"XXX", None))
#if QT_CONFIG(tooltip)
        self.rangeBegin.setToolTip(QCoreApplication.translate("MainWindow", u"Playback Start Frame", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(tooltip)
        self.rangeEnd.setToolTip(QCoreApplication.translate("MainWindow", u"Playback End Frame", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(tooltip)
        self.stageEnd.setToolTip(QCoreApplication.translate("MainWindow", u"Stage End Frame", None))
#endif // QT_CONFIG(tooltip)
        self.stageEnd.setText(QCoreApplication.translate("MainWindow", u"XXX", None))
#if QT_CONFIG(tooltip)
        self.redrawOnScrub.setToolTip(QCoreApplication.translate("MainWindow", u"If unchecked, the view will only redraw when scrubbing is done", None))
#endif // QT_CONFIG(tooltip)
        self.redrawOnScrub.setText(QCoreApplication.translate("MainWindow", u"Redraw On Frame Scrub", None))
        self.stepSizeLabel.setText(QCoreApplication.translate("MainWindow", u"Step Size", None))
#if QT_CONFIG(tooltip)
        self.stepSize.setToolTip(QCoreApplication.translate("MainWindow", u"Playback Step-size", None))
#endif // QT_CONFIG(tooltip)
        self.stepSize.setText(QCoreApplication.translate("MainWindow", u"1.0", None))
        self.playButton.setText(QCoreApplication.translate("MainWindow", u"Play", None))
        self.frameLabel.setText(QCoreApplication.translate("MainWindow", u"Frame:", None))
#if QT_CONFIG(tooltip)
        self.frameField.setToolTip(QCoreApplication.translate("MainWindow", u"Current Frame", None))
#endif // QT_CONFIG(tooltip)
        self.frameField.setText(QCoreApplication.translate("MainWindow", u"1.0", None))
        self.menuFile.setTitle(QCoreApplication.translate("MainWindow", u"&File", None))
        self.menuEdit.setTitle(QCoreApplication.translate("MainWindow", u"&Edit", None))
        self.menuInterpolation.setTitle(QCoreApplication.translate("MainWindow", u"Stage Interpolation", None))
        self.menuView.setTitle(QCoreApplication.translate("MainWindow", u"&View", None))
        self.menuHUD.setTitle(QCoreApplication.translate("MainWindow", u"Heads-Up Display", None))
        self.menuPickMode.setTitle(QCoreApplication.translate("MainWindow", u"Pick mode", None))
        self.menuSelection_Highlighting.setTitle(QCoreApplication.translate("MainWindow", u"Selection Highlighting", None))
        self.menuHighlightColor.setTitle(QCoreApplication.translate("MainWindow", u"Highlight Color", None))
        self.menuLights.setTitle(QCoreApplication.translate("MainWindow", u"Lights", None))
        self.menuShading_Mode.setTitle(QCoreApplication.translate("MainWindow", u"Shading Mode", None))
        self.menuColorCorrection.setTitle(QCoreApplication.translate("MainWindow", u"Color Management", None))
        self.menuBackground_Color.setTitle(QCoreApplication.translate("MainWindow", u"Background Color", None))
        self.menuCamera.setTitle(QCoreApplication.translate("MainWindow", u"Camera", None))
        self.menuCameraGuides.setTitle(QCoreApplication.translate("MainWindow", u"Camera Guides", None))
        self.menuCamera_Masking.setTitle(QCoreApplication.translate("MainWindow", u"Camera Masking", None))
        self.menuCamera_Reticles.setTitle(QCoreApplication.translate("MainWindow", u"Camera Reticles", None))
        self.menuDisplay.setTitle(QCoreApplication.translate("MainWindow", u"Display Purposes", None))
        self.menuBBox.setTitle(QCoreApplication.translate("MainWindow", u"Bounding Box", None))
        self.menuRendererPlugin.setTitle(QCoreApplication.translate("MainWindow", u"Hydra Renderer", None))
        self.menuRendererSettings.setTitle(QCoreApplication.translate("MainWindow", u"Hydra Settings", None))
        self.menuRendererAovs.setTitle(QCoreApplication.translate("MainWindow", u"Hydra AOVs", None))
        self.menuComplexity.setTitle(QCoreApplication.translate("MainWindow", u"Complexity", None))
        self.menuWindow.setTitle(QCoreApplication.translate("MainWindow", u"Window", None))
    # retranslateUi

